/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ANNTreeDaemon_TYPES_H
#define ANNTreeDaemon_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace ANNTreeDaemon {

typedef struct _Neighbor__isset {
  _Neighbor__isset() : id(false), distance(false) {}
  bool id;
  bool distance;
} _Neighbor__isset;

class Neighbor {
 public:

  static const char* ascii_fingerprint; // = "056BD45B5249CAA453D3C7B115F349DB";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x6B,0xD4,0x5B,0x52,0x49,0xCA,0xA4,0x53,0xD3,0xC7,0xB1,0x15,0xF3,0x49,0xDB};

  Neighbor() : id(0), distance(0) {
  }

  virtual ~Neighbor() throw() {}

  int64_t id;
  double distance;

  _Neighbor__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_distance(const double val) {
    distance = val;
  }

  bool operator == (const Neighbor & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(distance == rhs.distance))
      return false;
    return true;
  }
  bool operator != (const Neighbor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Neighbor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
