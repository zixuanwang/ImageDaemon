/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ANNTreeDaemon_H
#define ANNTreeDaemon_H

#include <TProcessor.h>
#include "ANNTreeDaemon_types.h"

namespace net { namespace walnutvision {

class ANNTreeDaemonIf {
 public:
  virtual ~ANNTreeDaemonIf() {}
  virtual void clear() = 0;
  virtual void putTree(const int32_t treeIndex) = 0;
  virtual void loadSample(const int32_t treeIndex, const std::string& sampleArray, const int32_t sampleCount) = 0;
  virtual void addFeature(const int32_t treeIndex, const int64_t id, const std::string& feature) = 0;
  virtual void index(const int32_t treeIndex) = 0;
  virtual void save(const int32_t treeIndex) = 0;
  virtual void load(const int32_t treeIndex) = 0;
  virtual void knnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k) = 0;
  virtual void similarSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const int64_t id, const int32_t k) = 0;
  virtual void slavePutTree(const int32_t treeIndex) = 0;
  virtual void slaveAddFeature(const int32_t treeIndex, const int64_t id, const std::string& feature) = 0;
  virtual void slaveIndex(const int32_t treeIndex) = 0;
  virtual void slaveKnnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k) = 0;
  virtual void slaveSave(const int32_t treeIndex) = 0;
  virtual void slaveLoad(const int32_t treeIndex) = 0;
  virtual void buildCategory(const std::string& categoryName) = 0;
  virtual void buildAllCategory() = 0;
  virtual void query(std::vector<std::string> & _return, const std::string& imagePath, const int32_t treeIndex, const std::string& featureType, const int32_t k) = 0;
};

class ANNTreeDaemonIfFactory {
 public:
  typedef ANNTreeDaemonIf Handler;

  virtual ~ANNTreeDaemonIfFactory() {}

  virtual ANNTreeDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ANNTreeDaemonIf* /* handler */) = 0;
};

class ANNTreeDaemonIfSingletonFactory : virtual public ANNTreeDaemonIfFactory {
 public:
  ANNTreeDaemonIfSingletonFactory(const boost::shared_ptr<ANNTreeDaemonIf>& iface) : iface_(iface) {}
  virtual ~ANNTreeDaemonIfSingletonFactory() {}

  virtual ANNTreeDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ANNTreeDaemonIf* /* handler */) {}

 protected:
  boost::shared_ptr<ANNTreeDaemonIf> iface_;
};

class ANNTreeDaemonNull : virtual public ANNTreeDaemonIf {
 public:
  virtual ~ANNTreeDaemonNull() {}
  void clear() {
    return;
  }
  void putTree(const int32_t /* treeIndex */) {
    return;
  }
  void loadSample(const int32_t /* treeIndex */, const std::string& /* sampleArray */, const int32_t /* sampleCount */) {
    return;
  }
  void addFeature(const int32_t /* treeIndex */, const int64_t /* id */, const std::string& /* feature */) {
    return;
  }
  void index(const int32_t /* treeIndex */) {
    return;
  }
  void save(const int32_t /* treeIndex */) {
    return;
  }
  void load(const int32_t /* treeIndex */) {
    return;
  }
  void knnSearch(std::vector<Neighbor> & /* _return */, const int32_t /* treeIndex */, const std::string& /* feature */, const int32_t /* k */) {
    return;
  }
  void similarSearch(std::vector<Neighbor> & /* _return */, const int32_t /* treeIndex */, const int64_t /* id */, const int32_t /* k */) {
    return;
  }
  void slavePutTree(const int32_t /* treeIndex */) {
    return;
  }
  void slaveAddFeature(const int32_t /* treeIndex */, const int64_t /* id */, const std::string& /* feature */) {
    return;
  }
  void slaveIndex(const int32_t /* treeIndex */) {
    return;
  }
  void slaveKnnSearch(std::vector<Neighbor> & /* _return */, const int32_t /* treeIndex */, const std::string& /* feature */, const int32_t /* k */) {
    return;
  }
  void slaveSave(const int32_t /* treeIndex */) {
    return;
  }
  void slaveLoad(const int32_t /* treeIndex */) {
    return;
  }
  void buildCategory(const std::string& /* categoryName */) {
    return;
  }
  void buildAllCategory() {
    return;
  }
  void query(std::vector<std::string> & /* _return */, const std::string& /* imagePath */, const int32_t /* treeIndex */, const std::string& /* featureType */, const int32_t /* k */) {
    return;
  }
};


class ANNTreeDaemon_clear_args {
 public:

  ANNTreeDaemon_clear_args() {
  }

  virtual ~ANNTreeDaemon_clear_args() throw() {}


  bool operator == (const ANNTreeDaemon_clear_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_clear_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_clear_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_clear_pargs {
 public:


  virtual ~ANNTreeDaemon_clear_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_clear_result {
 public:

  ANNTreeDaemon_clear_result() {
  }

  virtual ~ANNTreeDaemon_clear_result() throw() {}


  bool operator == (const ANNTreeDaemon_clear_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_clear_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_clear_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_clear_presult {
 public:


  virtual ~ANNTreeDaemon_clear_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_putTree_args__isset {
  _ANNTreeDaemon_putTree_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_putTree_args__isset;

class ANNTreeDaemon_putTree_args {
 public:

  ANNTreeDaemon_putTree_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_putTree_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_putTree_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_putTree_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_putTree_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_putTree_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_putTree_pargs {
 public:


  virtual ~ANNTreeDaemon_putTree_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_putTree_result {
 public:

  ANNTreeDaemon_putTree_result() {
  }

  virtual ~ANNTreeDaemon_putTree_result() throw() {}


  bool operator == (const ANNTreeDaemon_putTree_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_putTree_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_putTree_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_putTree_presult {
 public:


  virtual ~ANNTreeDaemon_putTree_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_loadSample_args__isset {
  _ANNTreeDaemon_loadSample_args__isset() : treeIndex(false), sampleArray(false), sampleCount(false) {}
  bool treeIndex;
  bool sampleArray;
  bool sampleCount;
} _ANNTreeDaemon_loadSample_args__isset;

class ANNTreeDaemon_loadSample_args {
 public:

  ANNTreeDaemon_loadSample_args() : treeIndex(0), sampleArray(""), sampleCount(0) {
  }

  virtual ~ANNTreeDaemon_loadSample_args() throw() {}

  int32_t treeIndex;
  std::string sampleArray;
  int32_t sampleCount;

  _ANNTreeDaemon_loadSample_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_sampleArray(const std::string& val) {
    sampleArray = val;
  }

  void __set_sampleCount(const int32_t val) {
    sampleCount = val;
  }

  bool operator == (const ANNTreeDaemon_loadSample_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(sampleArray == rhs.sampleArray))
      return false;
    if (!(sampleCount == rhs.sampleCount))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_loadSample_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_loadSample_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_loadSample_pargs {
 public:


  virtual ~ANNTreeDaemon_loadSample_pargs() throw() {}

  const int32_t* treeIndex;
  const std::string* sampleArray;
  const int32_t* sampleCount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_loadSample_result {
 public:

  ANNTreeDaemon_loadSample_result() {
  }

  virtual ~ANNTreeDaemon_loadSample_result() throw() {}


  bool operator == (const ANNTreeDaemon_loadSample_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_loadSample_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_loadSample_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_loadSample_presult {
 public:


  virtual ~ANNTreeDaemon_loadSample_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_addFeature_args__isset {
  _ANNTreeDaemon_addFeature_args__isset() : treeIndex(false), id(false), feature(false) {}
  bool treeIndex;
  bool id;
  bool feature;
} _ANNTreeDaemon_addFeature_args__isset;

class ANNTreeDaemon_addFeature_args {
 public:

  ANNTreeDaemon_addFeature_args() : treeIndex(0), id(0), feature("") {
  }

  virtual ~ANNTreeDaemon_addFeature_args() throw() {}

  int32_t treeIndex;
  int64_t id;
  std::string feature;

  _ANNTreeDaemon_addFeature_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_feature(const std::string& val) {
    feature = val;
  }

  bool operator == (const ANNTreeDaemon_addFeature_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(feature == rhs.feature))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_addFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_addFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_addFeature_pargs {
 public:


  virtual ~ANNTreeDaemon_addFeature_pargs() throw() {}

  const int32_t* treeIndex;
  const int64_t* id;
  const std::string* feature;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_addFeature_result {
 public:

  ANNTreeDaemon_addFeature_result() {
  }

  virtual ~ANNTreeDaemon_addFeature_result() throw() {}


  bool operator == (const ANNTreeDaemon_addFeature_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_addFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_addFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_addFeature_presult {
 public:


  virtual ~ANNTreeDaemon_addFeature_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_index_args__isset {
  _ANNTreeDaemon_index_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_index_args__isset;

class ANNTreeDaemon_index_args {
 public:

  ANNTreeDaemon_index_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_index_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_index_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_index_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_index_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_index_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_index_pargs {
 public:


  virtual ~ANNTreeDaemon_index_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_index_result {
 public:

  ANNTreeDaemon_index_result() {
  }

  virtual ~ANNTreeDaemon_index_result() throw() {}


  bool operator == (const ANNTreeDaemon_index_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_index_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_index_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_index_presult {
 public:


  virtual ~ANNTreeDaemon_index_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_save_args__isset {
  _ANNTreeDaemon_save_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_save_args__isset;

class ANNTreeDaemon_save_args {
 public:

  ANNTreeDaemon_save_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_save_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_save_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_save_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_save_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_save_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_save_pargs {
 public:


  virtual ~ANNTreeDaemon_save_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_save_result {
 public:

  ANNTreeDaemon_save_result() {
  }

  virtual ~ANNTreeDaemon_save_result() throw() {}


  bool operator == (const ANNTreeDaemon_save_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_save_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_save_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_save_presult {
 public:


  virtual ~ANNTreeDaemon_save_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_load_args__isset {
  _ANNTreeDaemon_load_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_load_args__isset;

class ANNTreeDaemon_load_args {
 public:

  ANNTreeDaemon_load_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_load_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_load_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_load_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_load_pargs {
 public:


  virtual ~ANNTreeDaemon_load_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_load_result {
 public:

  ANNTreeDaemon_load_result() {
  }

  virtual ~ANNTreeDaemon_load_result() throw() {}


  bool operator == (const ANNTreeDaemon_load_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_load_presult {
 public:


  virtual ~ANNTreeDaemon_load_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_knnSearch_args__isset {
  _ANNTreeDaemon_knnSearch_args__isset() : treeIndex(false), feature(false), k(false) {}
  bool treeIndex;
  bool feature;
  bool k;
} _ANNTreeDaemon_knnSearch_args__isset;

class ANNTreeDaemon_knnSearch_args {
 public:

  ANNTreeDaemon_knnSearch_args() : treeIndex(0), feature(""), k(0) {
  }

  virtual ~ANNTreeDaemon_knnSearch_args() throw() {}

  int32_t treeIndex;
  std::string feature;
  int32_t k;

  _ANNTreeDaemon_knnSearch_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_feature(const std::string& val) {
    feature = val;
  }

  void __set_k(const int32_t val) {
    k = val;
  }

  bool operator == (const ANNTreeDaemon_knnSearch_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(feature == rhs.feature))
      return false;
    if (!(k == rhs.k))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_knnSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_knnSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_knnSearch_pargs {
 public:


  virtual ~ANNTreeDaemon_knnSearch_pargs() throw() {}

  const int32_t* treeIndex;
  const std::string* feature;
  const int32_t* k;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_knnSearch_result__isset {
  _ANNTreeDaemon_knnSearch_result__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_knnSearch_result__isset;

class ANNTreeDaemon_knnSearch_result {
 public:

  ANNTreeDaemon_knnSearch_result() {
  }

  virtual ~ANNTreeDaemon_knnSearch_result() throw() {}

  std::vector<Neighbor>  success;

  _ANNTreeDaemon_knnSearch_result__isset __isset;

  void __set_success(const std::vector<Neighbor> & val) {
    success = val;
  }

  bool operator == (const ANNTreeDaemon_knnSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_knnSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_knnSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_knnSearch_presult__isset {
  _ANNTreeDaemon_knnSearch_presult__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_knnSearch_presult__isset;

class ANNTreeDaemon_knnSearch_presult {
 public:


  virtual ~ANNTreeDaemon_knnSearch_presult() throw() {}

  std::vector<Neighbor> * success;

  _ANNTreeDaemon_knnSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_similarSearch_args__isset {
  _ANNTreeDaemon_similarSearch_args__isset() : treeIndex(false), id(false), k(false) {}
  bool treeIndex;
  bool id;
  bool k;
} _ANNTreeDaemon_similarSearch_args__isset;

class ANNTreeDaemon_similarSearch_args {
 public:

  ANNTreeDaemon_similarSearch_args() : treeIndex(0), id(0), k(0) {
  }

  virtual ~ANNTreeDaemon_similarSearch_args() throw() {}

  int32_t treeIndex;
  int64_t id;
  int32_t k;

  _ANNTreeDaemon_similarSearch_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_k(const int32_t val) {
    k = val;
  }

  bool operator == (const ANNTreeDaemon_similarSearch_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(k == rhs.k))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_similarSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_similarSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_similarSearch_pargs {
 public:


  virtual ~ANNTreeDaemon_similarSearch_pargs() throw() {}

  const int32_t* treeIndex;
  const int64_t* id;
  const int32_t* k;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_similarSearch_result__isset {
  _ANNTreeDaemon_similarSearch_result__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_similarSearch_result__isset;

class ANNTreeDaemon_similarSearch_result {
 public:

  ANNTreeDaemon_similarSearch_result() {
  }

  virtual ~ANNTreeDaemon_similarSearch_result() throw() {}

  std::vector<Neighbor>  success;

  _ANNTreeDaemon_similarSearch_result__isset __isset;

  void __set_success(const std::vector<Neighbor> & val) {
    success = val;
  }

  bool operator == (const ANNTreeDaemon_similarSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_similarSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_similarSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_similarSearch_presult__isset {
  _ANNTreeDaemon_similarSearch_presult__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_similarSearch_presult__isset;

class ANNTreeDaemon_similarSearch_presult {
 public:


  virtual ~ANNTreeDaemon_similarSearch_presult() throw() {}

  std::vector<Neighbor> * success;

  _ANNTreeDaemon_similarSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_slavePutTree_args__isset {
  _ANNTreeDaemon_slavePutTree_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_slavePutTree_args__isset;

class ANNTreeDaemon_slavePutTree_args {
 public:

  ANNTreeDaemon_slavePutTree_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_slavePutTree_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_slavePutTree_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_slavePutTree_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slavePutTree_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slavePutTree_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slavePutTree_pargs {
 public:


  virtual ~ANNTreeDaemon_slavePutTree_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slavePutTree_result {
 public:

  ANNTreeDaemon_slavePutTree_result() {
  }

  virtual ~ANNTreeDaemon_slavePutTree_result() throw() {}


  bool operator == (const ANNTreeDaemon_slavePutTree_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_slavePutTree_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slavePutTree_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slavePutTree_presult {
 public:


  virtual ~ANNTreeDaemon_slavePutTree_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_slaveAddFeature_args__isset {
  _ANNTreeDaemon_slaveAddFeature_args__isset() : treeIndex(false), id(false), feature(false) {}
  bool treeIndex;
  bool id;
  bool feature;
} _ANNTreeDaemon_slaveAddFeature_args__isset;

class ANNTreeDaemon_slaveAddFeature_args {
 public:

  ANNTreeDaemon_slaveAddFeature_args() : treeIndex(0), id(0), feature("") {
  }

  virtual ~ANNTreeDaemon_slaveAddFeature_args() throw() {}

  int32_t treeIndex;
  int64_t id;
  std::string feature;

  _ANNTreeDaemon_slaveAddFeature_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_feature(const std::string& val) {
    feature = val;
  }

  bool operator == (const ANNTreeDaemon_slaveAddFeature_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(feature == rhs.feature))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveAddFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveAddFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveAddFeature_pargs {
 public:


  virtual ~ANNTreeDaemon_slaveAddFeature_pargs() throw() {}

  const int32_t* treeIndex;
  const int64_t* id;
  const std::string* feature;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveAddFeature_result {
 public:

  ANNTreeDaemon_slaveAddFeature_result() {
  }

  virtual ~ANNTreeDaemon_slaveAddFeature_result() throw() {}


  bool operator == (const ANNTreeDaemon_slaveAddFeature_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveAddFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveAddFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveAddFeature_presult {
 public:


  virtual ~ANNTreeDaemon_slaveAddFeature_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_slaveIndex_args__isset {
  _ANNTreeDaemon_slaveIndex_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_slaveIndex_args__isset;

class ANNTreeDaemon_slaveIndex_args {
 public:

  ANNTreeDaemon_slaveIndex_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_slaveIndex_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_slaveIndex_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_slaveIndex_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveIndex_pargs {
 public:


  virtual ~ANNTreeDaemon_slaveIndex_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveIndex_result {
 public:

  ANNTreeDaemon_slaveIndex_result() {
  }

  virtual ~ANNTreeDaemon_slaveIndex_result() throw() {}


  bool operator == (const ANNTreeDaemon_slaveIndex_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveIndex_presult {
 public:


  virtual ~ANNTreeDaemon_slaveIndex_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_slaveKnnSearch_args__isset {
  _ANNTreeDaemon_slaveKnnSearch_args__isset() : treeIndex(false), feature(false), k(false) {}
  bool treeIndex;
  bool feature;
  bool k;
} _ANNTreeDaemon_slaveKnnSearch_args__isset;

class ANNTreeDaemon_slaveKnnSearch_args {
 public:

  ANNTreeDaemon_slaveKnnSearch_args() : treeIndex(0), feature(""), k(0) {
  }

  virtual ~ANNTreeDaemon_slaveKnnSearch_args() throw() {}

  int32_t treeIndex;
  std::string feature;
  int32_t k;

  _ANNTreeDaemon_slaveKnnSearch_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_feature(const std::string& val) {
    feature = val;
  }

  void __set_k(const int32_t val) {
    k = val;
  }

  bool operator == (const ANNTreeDaemon_slaveKnnSearch_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(feature == rhs.feature))
      return false;
    if (!(k == rhs.k))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveKnnSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveKnnSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveKnnSearch_pargs {
 public:


  virtual ~ANNTreeDaemon_slaveKnnSearch_pargs() throw() {}

  const int32_t* treeIndex;
  const std::string* feature;
  const int32_t* k;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_slaveKnnSearch_result__isset {
  _ANNTreeDaemon_slaveKnnSearch_result__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_slaveKnnSearch_result__isset;

class ANNTreeDaemon_slaveKnnSearch_result {
 public:

  ANNTreeDaemon_slaveKnnSearch_result() {
  }

  virtual ~ANNTreeDaemon_slaveKnnSearch_result() throw() {}

  std::vector<Neighbor>  success;

  _ANNTreeDaemon_slaveKnnSearch_result__isset __isset;

  void __set_success(const std::vector<Neighbor> & val) {
    success = val;
  }

  bool operator == (const ANNTreeDaemon_slaveKnnSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveKnnSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveKnnSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_slaveKnnSearch_presult__isset {
  _ANNTreeDaemon_slaveKnnSearch_presult__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_slaveKnnSearch_presult__isset;

class ANNTreeDaemon_slaveKnnSearch_presult {
 public:


  virtual ~ANNTreeDaemon_slaveKnnSearch_presult() throw() {}

  std::vector<Neighbor> * success;

  _ANNTreeDaemon_slaveKnnSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_slaveSave_args__isset {
  _ANNTreeDaemon_slaveSave_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_slaveSave_args__isset;

class ANNTreeDaemon_slaveSave_args {
 public:

  ANNTreeDaemon_slaveSave_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_slaveSave_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_slaveSave_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_slaveSave_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveSave_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveSave_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveSave_pargs {
 public:


  virtual ~ANNTreeDaemon_slaveSave_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveSave_result {
 public:

  ANNTreeDaemon_slaveSave_result() {
  }

  virtual ~ANNTreeDaemon_slaveSave_result() throw() {}


  bool operator == (const ANNTreeDaemon_slaveSave_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveSave_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveSave_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveSave_presult {
 public:


  virtual ~ANNTreeDaemon_slaveSave_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_slaveLoad_args__isset {
  _ANNTreeDaemon_slaveLoad_args__isset() : treeIndex(false) {}
  bool treeIndex;
} _ANNTreeDaemon_slaveLoad_args__isset;

class ANNTreeDaemon_slaveLoad_args {
 public:

  ANNTreeDaemon_slaveLoad_args() : treeIndex(0) {
  }

  virtual ~ANNTreeDaemon_slaveLoad_args() throw() {}

  int32_t treeIndex;

  _ANNTreeDaemon_slaveLoad_args__isset __isset;

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  bool operator == (const ANNTreeDaemon_slaveLoad_args & rhs) const
  {
    if (!(treeIndex == rhs.treeIndex))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveLoad_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveLoad_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveLoad_pargs {
 public:


  virtual ~ANNTreeDaemon_slaveLoad_pargs() throw() {}

  const int32_t* treeIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveLoad_result {
 public:

  ANNTreeDaemon_slaveLoad_result() {
  }

  virtual ~ANNTreeDaemon_slaveLoad_result() throw() {}


  bool operator == (const ANNTreeDaemon_slaveLoad_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_slaveLoad_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_slaveLoad_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_slaveLoad_presult {
 public:


  virtual ~ANNTreeDaemon_slaveLoad_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_buildCategory_args__isset {
  _ANNTreeDaemon_buildCategory_args__isset() : categoryName(false) {}
  bool categoryName;
} _ANNTreeDaemon_buildCategory_args__isset;

class ANNTreeDaemon_buildCategory_args {
 public:

  ANNTreeDaemon_buildCategory_args() : categoryName("") {
  }

  virtual ~ANNTreeDaemon_buildCategory_args() throw() {}

  std::string categoryName;

  _ANNTreeDaemon_buildCategory_args__isset __isset;

  void __set_categoryName(const std::string& val) {
    categoryName = val;
  }

  bool operator == (const ANNTreeDaemon_buildCategory_args & rhs) const
  {
    if (!(categoryName == rhs.categoryName))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_buildCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_buildCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_buildCategory_pargs {
 public:


  virtual ~ANNTreeDaemon_buildCategory_pargs() throw() {}

  const std::string* categoryName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_buildCategory_result {
 public:

  ANNTreeDaemon_buildCategory_result() {
  }

  virtual ~ANNTreeDaemon_buildCategory_result() throw() {}


  bool operator == (const ANNTreeDaemon_buildCategory_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_buildCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_buildCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_buildCategory_presult {
 public:


  virtual ~ANNTreeDaemon_buildCategory_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ANNTreeDaemon_buildAllCategory_args {
 public:

  ANNTreeDaemon_buildAllCategory_args() {
  }

  virtual ~ANNTreeDaemon_buildAllCategory_args() throw() {}


  bool operator == (const ANNTreeDaemon_buildAllCategory_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_buildAllCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_buildAllCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_buildAllCategory_pargs {
 public:


  virtual ~ANNTreeDaemon_buildAllCategory_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_buildAllCategory_result {
 public:

  ANNTreeDaemon_buildAllCategory_result() {
  }

  virtual ~ANNTreeDaemon_buildAllCategory_result() throw() {}


  bool operator == (const ANNTreeDaemon_buildAllCategory_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ANNTreeDaemon_buildAllCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_buildAllCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_buildAllCategory_presult {
 public:


  virtual ~ANNTreeDaemon_buildAllCategory_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ANNTreeDaemon_query_args__isset {
  _ANNTreeDaemon_query_args__isset() : imagePath(false), treeIndex(false), featureType(false), k(false) {}
  bool imagePath;
  bool treeIndex;
  bool featureType;
  bool k;
} _ANNTreeDaemon_query_args__isset;

class ANNTreeDaemon_query_args {
 public:

  ANNTreeDaemon_query_args() : imagePath(""), treeIndex(0), featureType(""), k(0) {
  }

  virtual ~ANNTreeDaemon_query_args() throw() {}

  std::string imagePath;
  int32_t treeIndex;
  std::string featureType;
  int32_t k;

  _ANNTreeDaemon_query_args__isset __isset;

  void __set_imagePath(const std::string& val) {
    imagePath = val;
  }

  void __set_treeIndex(const int32_t val) {
    treeIndex = val;
  }

  void __set_featureType(const std::string& val) {
    featureType = val;
  }

  void __set_k(const int32_t val) {
    k = val;
  }

  bool operator == (const ANNTreeDaemon_query_args & rhs) const
  {
    if (!(imagePath == rhs.imagePath))
      return false;
    if (!(treeIndex == rhs.treeIndex))
      return false;
    if (!(featureType == rhs.featureType))
      return false;
    if (!(k == rhs.k))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ANNTreeDaemon_query_pargs {
 public:


  virtual ~ANNTreeDaemon_query_pargs() throw() {}

  const std::string* imagePath;
  const int32_t* treeIndex;
  const std::string* featureType;
  const int32_t* k;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_query_result__isset {
  _ANNTreeDaemon_query_result__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_query_result__isset;

class ANNTreeDaemon_query_result {
 public:

  ANNTreeDaemon_query_result() {
  }

  virtual ~ANNTreeDaemon_query_result() throw() {}

  std::vector<std::string>  success;

  _ANNTreeDaemon_query_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const ANNTreeDaemon_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ANNTreeDaemon_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ANNTreeDaemon_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ANNTreeDaemon_query_presult__isset {
  _ANNTreeDaemon_query_presult__isset() : success(false) {}
  bool success;
} _ANNTreeDaemon_query_presult__isset;

class ANNTreeDaemon_query_presult {
 public:


  virtual ~ANNTreeDaemon_query_presult() throw() {}

  std::vector<std::string> * success;

  _ANNTreeDaemon_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ANNTreeDaemonClient : virtual public ANNTreeDaemonIf {
 public:
  ANNTreeDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ANNTreeDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void clear();
  void send_clear();
  void recv_clear();
  void putTree(const int32_t treeIndex);
  void send_putTree(const int32_t treeIndex);
  void recv_putTree();
  void loadSample(const int32_t treeIndex, const std::string& sampleArray, const int32_t sampleCount);
  void send_loadSample(const int32_t treeIndex, const std::string& sampleArray, const int32_t sampleCount);
  void recv_loadSample();
  void addFeature(const int32_t treeIndex, const int64_t id, const std::string& feature);
  void send_addFeature(const int32_t treeIndex, const int64_t id, const std::string& feature);
  void recv_addFeature();
  void index(const int32_t treeIndex);
  void send_index(const int32_t treeIndex);
  void recv_index();
  void save(const int32_t treeIndex);
  void send_save(const int32_t treeIndex);
  void recv_save();
  void load(const int32_t treeIndex);
  void send_load(const int32_t treeIndex);
  void recv_load();
  void knnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k);
  void send_knnSearch(const int32_t treeIndex, const std::string& feature, const int32_t k);
  void recv_knnSearch(std::vector<Neighbor> & _return);
  void similarSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const int64_t id, const int32_t k);
  void send_similarSearch(const int32_t treeIndex, const int64_t id, const int32_t k);
  void recv_similarSearch(std::vector<Neighbor> & _return);
  void slavePutTree(const int32_t treeIndex);
  void send_slavePutTree(const int32_t treeIndex);
  void recv_slavePutTree();
  void slaveAddFeature(const int32_t treeIndex, const int64_t id, const std::string& feature);
  void send_slaveAddFeature(const int32_t treeIndex, const int64_t id, const std::string& feature);
  void recv_slaveAddFeature();
  void slaveIndex(const int32_t treeIndex);
  void send_slaveIndex(const int32_t treeIndex);
  void recv_slaveIndex();
  void slaveKnnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k);
  void send_slaveKnnSearch(const int32_t treeIndex, const std::string& feature, const int32_t k);
  void recv_slaveKnnSearch(std::vector<Neighbor> & _return);
  void slaveSave(const int32_t treeIndex);
  void send_slaveSave(const int32_t treeIndex);
  void recv_slaveSave();
  void slaveLoad(const int32_t treeIndex);
  void send_slaveLoad(const int32_t treeIndex);
  void recv_slaveLoad();
  void buildCategory(const std::string& categoryName);
  void send_buildCategory(const std::string& categoryName);
  void recv_buildCategory();
  void buildAllCategory();
  void send_buildAllCategory();
  void recv_buildAllCategory();
  void query(std::vector<std::string> & _return, const std::string& imagePath, const int32_t treeIndex, const std::string& featureType, const int32_t k);
  void send_query(const std::string& imagePath, const int32_t treeIndex, const std::string& featureType, const int32_t k);
  void recv_query(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ANNTreeDaemonProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ANNTreeDaemonIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ANNTreeDaemonProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_clear(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putTree(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadSample(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addFeature(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_index(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_save(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_knnSearch(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_similarSearch(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slavePutTree(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slaveAddFeature(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slaveIndex(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slaveKnnSearch(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slaveSave(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slaveLoad(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_buildCategory(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_buildAllCategory(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ANNTreeDaemonProcessor(boost::shared_ptr<ANNTreeDaemonIf> iface) :
    iface_(iface) {
    processMap_["clear"] = &ANNTreeDaemonProcessor::process_clear;
    processMap_["putTree"] = &ANNTreeDaemonProcessor::process_putTree;
    processMap_["loadSample"] = &ANNTreeDaemonProcessor::process_loadSample;
    processMap_["addFeature"] = &ANNTreeDaemonProcessor::process_addFeature;
    processMap_["index"] = &ANNTreeDaemonProcessor::process_index;
    processMap_["save"] = &ANNTreeDaemonProcessor::process_save;
    processMap_["load"] = &ANNTreeDaemonProcessor::process_load;
    processMap_["knnSearch"] = &ANNTreeDaemonProcessor::process_knnSearch;
    processMap_["similarSearch"] = &ANNTreeDaemonProcessor::process_similarSearch;
    processMap_["slavePutTree"] = &ANNTreeDaemonProcessor::process_slavePutTree;
    processMap_["slaveAddFeature"] = &ANNTreeDaemonProcessor::process_slaveAddFeature;
    processMap_["slaveIndex"] = &ANNTreeDaemonProcessor::process_slaveIndex;
    processMap_["slaveKnnSearch"] = &ANNTreeDaemonProcessor::process_slaveKnnSearch;
    processMap_["slaveSave"] = &ANNTreeDaemonProcessor::process_slaveSave;
    processMap_["slaveLoad"] = &ANNTreeDaemonProcessor::process_slaveLoad;
    processMap_["buildCategory"] = &ANNTreeDaemonProcessor::process_buildCategory;
    processMap_["buildAllCategory"] = &ANNTreeDaemonProcessor::process_buildAllCategory;
    processMap_["query"] = &ANNTreeDaemonProcessor::process_query;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ANNTreeDaemonProcessor() {}
};

class ANNTreeDaemonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ANNTreeDaemonProcessorFactory(const ::boost::shared_ptr< ANNTreeDaemonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ANNTreeDaemonIfFactory > handlerFactory_;
};

class ANNTreeDaemonMultiface : virtual public ANNTreeDaemonIf {
 public:
  ANNTreeDaemonMultiface(std::vector<boost::shared_ptr<ANNTreeDaemonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ANNTreeDaemonMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ANNTreeDaemonIf> > ifaces_;
  ANNTreeDaemonMultiface() {}
  void add(boost::shared_ptr<ANNTreeDaemonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void clear() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->clear();
    }
  }

  void putTree(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->putTree(treeIndex);
    }
  }

  void loadSample(const int32_t treeIndex, const std::string& sampleArray, const int32_t sampleCount) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->loadSample(treeIndex, sampleArray, sampleCount);
    }
  }

  void addFeature(const int32_t treeIndex, const int64_t id, const std::string& feature) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->addFeature(treeIndex, id, feature);
    }
  }

  void index(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->index(treeIndex);
    }
  }

  void save(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->save(treeIndex);
    }
  }

  void load(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->load(treeIndex);
    }
  }

  void knnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->knnSearch(_return, treeIndex, feature, k);
        return;
      } else {
        ifaces_[i]->knnSearch(_return, treeIndex, feature, k);
      }
    }
  }

  void similarSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const int64_t id, const int32_t k) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->similarSearch(_return, treeIndex, id, k);
        return;
      } else {
        ifaces_[i]->similarSearch(_return, treeIndex, id, k);
      }
    }
  }

  void slavePutTree(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->slavePutTree(treeIndex);
    }
  }

  void slaveAddFeature(const int32_t treeIndex, const int64_t id, const std::string& feature) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->slaveAddFeature(treeIndex, id, feature);
    }
  }

  void slaveIndex(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->slaveIndex(treeIndex);
    }
  }

  void slaveKnnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->slaveKnnSearch(_return, treeIndex, feature, k);
        return;
      } else {
        ifaces_[i]->slaveKnnSearch(_return, treeIndex, feature, k);
      }
    }
  }

  void slaveSave(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->slaveSave(treeIndex);
    }
  }

  void slaveLoad(const int32_t treeIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->slaveLoad(treeIndex);
    }
  }

  void buildCategory(const std::string& categoryName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->buildCategory(categoryName);
    }
  }

  void buildAllCategory() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->buildAllCategory();
    }
  }

  void query(std::vector<std::string> & _return, const std::string& imagePath, const int32_t treeIndex, const std::string& featureType, const int32_t k) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->query(_return, imagePath, treeIndex, featureType, k);
        return;
      } else {
        ifaces_[i]->query(_return, imagePath, treeIndex, featureType, k);
      }
    }
  }

};

}} // namespace

#endif
