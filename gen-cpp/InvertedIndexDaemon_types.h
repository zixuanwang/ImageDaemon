/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InvertedIndexDaemon_TYPES_H
#define InvertedIndexDaemon_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace InvertedIndexDaemon {

typedef struct _Posting__isset {
  _Posting__isset() : imageId(false), score(false) {}
  bool imageId;
  bool score;
} _Posting__isset;

class Posting {
 public:

  static const char* ascii_fingerprint; // = "056BD45B5249CAA453D3C7B115F349DB";
  static const uint8_t binary_fingerprint[16]; // = {0x05,0x6B,0xD4,0x5B,0x52,0x49,0xCA,0xA4,0x53,0xD3,0xC7,0xB1,0x15,0xF3,0x49,0xDB};

  Posting() : imageId(0), score(0) {
  }

  virtual ~Posting() throw() {}

  int64_t imageId;
  double score;

  _Posting__isset __isset;

  void __set_imageId(const int64_t val) {
    imageId = val;
  }

  void __set_score(const double val) {
    score = val;
  }

  bool operator == (const Posting & rhs) const
  {
    if (!(imageId == rhs.imageId))
      return false;
    if (!(score == rhs.score))
      return false;
    return true;
  }
  bool operator != (const Posting &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Posting & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
