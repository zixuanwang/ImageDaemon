/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImageDaemon_H
#define ImageDaemon_H

#include <TProcessor.h>
#include "ImageDaemon_types.h"

namespace net { namespace walnutvision {

class ImageDaemonIf {
 public:
  virtual ~ImageDaemonIf() {}
  virtual void computeBoWFeature(std::vector<Bin> & _return, const int64_t rowKey) = 0;
  virtual void computeColorFeature(const int64_t rowKey) = 0;
  virtual void computeShapeFeature(const int64_t rowKey) = 0;
  virtual void query(std::vector<std::string> & _return, const std::string& imagePath) = 0;
  virtual void addImage(const std::string& imageHash, const int64_t rowKey) = 0;
  virtual void indexImage(const std::string& imageHash, const int64_t rowKey) = 0;
  virtual void cropImage(const std::string& imagePath, const std::string& cropImagePath, const int32_t width, const int32_t height) = 0;
};

class ImageDaemonIfFactory {
 public:
  typedef ImageDaemonIf Handler;

  virtual ~ImageDaemonIfFactory() {}

  virtual ImageDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ImageDaemonIf* /* handler */) = 0;
};

class ImageDaemonIfSingletonFactory : virtual public ImageDaemonIfFactory {
 public:
  ImageDaemonIfSingletonFactory(const boost::shared_ptr<ImageDaemonIf>& iface) : iface_(iface) {}
  virtual ~ImageDaemonIfSingletonFactory() {}

  virtual ImageDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ImageDaemonIf* /* handler */) {}

 protected:
  boost::shared_ptr<ImageDaemonIf> iface_;
};

class ImageDaemonNull : virtual public ImageDaemonIf {
 public:
  virtual ~ImageDaemonNull() {}
  void computeBoWFeature(std::vector<Bin> & /* _return */, const int64_t /* rowKey */) {
    return;
  }
  void computeColorFeature(const int64_t /* rowKey */) {
    return;
  }
  void computeShapeFeature(const int64_t /* rowKey */) {
    return;
  }
  void query(std::vector<std::string> & /* _return */, const std::string& /* imagePath */) {
    return;
  }
  void addImage(const std::string& /* imageHash */, const int64_t /* rowKey */) {
    return;
  }
  void indexImage(const std::string& /* imageHash */, const int64_t /* rowKey */) {
    return;
  }
  void cropImage(const std::string& /* imagePath */, const std::string& /* cropImagePath */, const int32_t /* width */, const int32_t /* height */) {
    return;
  }
};

typedef struct _ImageDaemon_computeBoWFeature_args__isset {
  _ImageDaemon_computeBoWFeature_args__isset() : rowKey(false) {}
  bool rowKey;
} _ImageDaemon_computeBoWFeature_args__isset;

class ImageDaemon_computeBoWFeature_args {
 public:

  ImageDaemon_computeBoWFeature_args() : rowKey(0) {
  }

  virtual ~ImageDaemon_computeBoWFeature_args() throw() {}

  int64_t rowKey;

  _ImageDaemon_computeBoWFeature_args__isset __isset;

  void __set_rowKey(const int64_t val) {
    rowKey = val;
  }

  bool operator == (const ImageDaemon_computeBoWFeature_args & rhs) const
  {
    if (!(rowKey == rhs.rowKey))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_computeBoWFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_computeBoWFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeBoWFeature_pargs {
 public:


  virtual ~ImageDaemon_computeBoWFeature_pargs() throw() {}

  const int64_t* rowKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageDaemon_computeBoWFeature_result__isset {
  _ImageDaemon_computeBoWFeature_result__isset() : success(false) {}
  bool success;
} _ImageDaemon_computeBoWFeature_result__isset;

class ImageDaemon_computeBoWFeature_result {
 public:

  ImageDaemon_computeBoWFeature_result() {
  }

  virtual ~ImageDaemon_computeBoWFeature_result() throw() {}

  std::vector<Bin>  success;

  _ImageDaemon_computeBoWFeature_result__isset __isset;

  void __set_success(const std::vector<Bin> & val) {
    success = val;
  }

  bool operator == (const ImageDaemon_computeBoWFeature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_computeBoWFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_computeBoWFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageDaemon_computeBoWFeature_presult__isset {
  _ImageDaemon_computeBoWFeature_presult__isset() : success(false) {}
  bool success;
} _ImageDaemon_computeBoWFeature_presult__isset;

class ImageDaemon_computeBoWFeature_presult {
 public:


  virtual ~ImageDaemon_computeBoWFeature_presult() throw() {}

  std::vector<Bin> * success;

  _ImageDaemon_computeBoWFeature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageDaemon_computeColorFeature_args__isset {
  _ImageDaemon_computeColorFeature_args__isset() : rowKey(false) {}
  bool rowKey;
} _ImageDaemon_computeColorFeature_args__isset;

class ImageDaemon_computeColorFeature_args {
 public:

  ImageDaemon_computeColorFeature_args() : rowKey(0) {
  }

  virtual ~ImageDaemon_computeColorFeature_args() throw() {}

  int64_t rowKey;

  _ImageDaemon_computeColorFeature_args__isset __isset;

  void __set_rowKey(const int64_t val) {
    rowKey = val;
  }

  bool operator == (const ImageDaemon_computeColorFeature_args & rhs) const
  {
    if (!(rowKey == rhs.rowKey))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_computeColorFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_computeColorFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeColorFeature_pargs {
 public:


  virtual ~ImageDaemon_computeColorFeature_pargs() throw() {}

  const int64_t* rowKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeColorFeature_result {
 public:

  ImageDaemon_computeColorFeature_result() {
  }

  virtual ~ImageDaemon_computeColorFeature_result() throw() {}


  bool operator == (const ImageDaemon_computeColorFeature_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageDaemon_computeColorFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_computeColorFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeColorFeature_presult {
 public:


  virtual ~ImageDaemon_computeColorFeature_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageDaemon_computeShapeFeature_args__isset {
  _ImageDaemon_computeShapeFeature_args__isset() : rowKey(false) {}
  bool rowKey;
} _ImageDaemon_computeShapeFeature_args__isset;

class ImageDaemon_computeShapeFeature_args {
 public:

  ImageDaemon_computeShapeFeature_args() : rowKey(0) {
  }

  virtual ~ImageDaemon_computeShapeFeature_args() throw() {}

  int64_t rowKey;

  _ImageDaemon_computeShapeFeature_args__isset __isset;

  void __set_rowKey(const int64_t val) {
    rowKey = val;
  }

  bool operator == (const ImageDaemon_computeShapeFeature_args & rhs) const
  {
    if (!(rowKey == rhs.rowKey))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_computeShapeFeature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_computeShapeFeature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeShapeFeature_pargs {
 public:


  virtual ~ImageDaemon_computeShapeFeature_pargs() throw() {}

  const int64_t* rowKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeShapeFeature_result {
 public:

  ImageDaemon_computeShapeFeature_result() {
  }

  virtual ~ImageDaemon_computeShapeFeature_result() throw() {}


  bool operator == (const ImageDaemon_computeShapeFeature_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageDaemon_computeShapeFeature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_computeShapeFeature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_computeShapeFeature_presult {
 public:


  virtual ~ImageDaemon_computeShapeFeature_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageDaemon_query_args__isset {
  _ImageDaemon_query_args__isset() : imagePath(false) {}
  bool imagePath;
} _ImageDaemon_query_args__isset;

class ImageDaemon_query_args {
 public:

  ImageDaemon_query_args() : imagePath("") {
  }

  virtual ~ImageDaemon_query_args() throw() {}

  std::string imagePath;

  _ImageDaemon_query_args__isset __isset;

  void __set_imagePath(const std::string& val) {
    imagePath = val;
  }

  bool operator == (const ImageDaemon_query_args & rhs) const
  {
    if (!(imagePath == rhs.imagePath))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_query_pargs {
 public:


  virtual ~ImageDaemon_query_pargs() throw() {}

  const std::string* imagePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageDaemon_query_result__isset {
  _ImageDaemon_query_result__isset() : success(false) {}
  bool success;
} _ImageDaemon_query_result__isset;

class ImageDaemon_query_result {
 public:

  ImageDaemon_query_result() {
  }

  virtual ~ImageDaemon_query_result() throw() {}

  std::vector<std::string>  success;

  _ImageDaemon_query_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const ImageDaemon_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageDaemon_query_presult__isset {
  _ImageDaemon_query_presult__isset() : success(false) {}
  bool success;
} _ImageDaemon_query_presult__isset;

class ImageDaemon_query_presult {
 public:


  virtual ~ImageDaemon_query_presult() throw() {}

  std::vector<std::string> * success;

  _ImageDaemon_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageDaemon_addImage_args__isset {
  _ImageDaemon_addImage_args__isset() : imageHash(false), rowKey(false) {}
  bool imageHash;
  bool rowKey;
} _ImageDaemon_addImage_args__isset;

class ImageDaemon_addImage_args {
 public:

  ImageDaemon_addImage_args() : imageHash(""), rowKey(0) {
  }

  virtual ~ImageDaemon_addImage_args() throw() {}

  std::string imageHash;
  int64_t rowKey;

  _ImageDaemon_addImage_args__isset __isset;

  void __set_imageHash(const std::string& val) {
    imageHash = val;
  }

  void __set_rowKey(const int64_t val) {
    rowKey = val;
  }

  bool operator == (const ImageDaemon_addImage_args & rhs) const
  {
    if (!(imageHash == rhs.imageHash))
      return false;
    if (!(rowKey == rhs.rowKey))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_addImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_addImage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_addImage_pargs {
 public:


  virtual ~ImageDaemon_addImage_pargs() throw() {}

  const std::string* imageHash;
  const int64_t* rowKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_addImage_result {
 public:

  ImageDaemon_addImage_result() {
  }

  virtual ~ImageDaemon_addImage_result() throw() {}


  bool operator == (const ImageDaemon_addImage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageDaemon_addImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_addImage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_addImage_presult {
 public:


  virtual ~ImageDaemon_addImage_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageDaemon_indexImage_args__isset {
  _ImageDaemon_indexImage_args__isset() : imageHash(false), rowKey(false) {}
  bool imageHash;
  bool rowKey;
} _ImageDaemon_indexImage_args__isset;

class ImageDaemon_indexImage_args {
 public:

  ImageDaemon_indexImage_args() : imageHash(""), rowKey(0) {
  }

  virtual ~ImageDaemon_indexImage_args() throw() {}

  std::string imageHash;
  int64_t rowKey;

  _ImageDaemon_indexImage_args__isset __isset;

  void __set_imageHash(const std::string& val) {
    imageHash = val;
  }

  void __set_rowKey(const int64_t val) {
    rowKey = val;
  }

  bool operator == (const ImageDaemon_indexImage_args & rhs) const
  {
    if (!(imageHash == rhs.imageHash))
      return false;
    if (!(rowKey == rhs.rowKey))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_indexImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_indexImage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_indexImage_pargs {
 public:


  virtual ~ImageDaemon_indexImage_pargs() throw() {}

  const std::string* imageHash;
  const int64_t* rowKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_indexImage_result {
 public:

  ImageDaemon_indexImage_result() {
  }

  virtual ~ImageDaemon_indexImage_result() throw() {}


  bool operator == (const ImageDaemon_indexImage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageDaemon_indexImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_indexImage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_indexImage_presult {
 public:


  virtual ~ImageDaemon_indexImage_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImageDaemon_cropImage_args__isset {
  _ImageDaemon_cropImage_args__isset() : imagePath(false), cropImagePath(false), width(false), height(false) {}
  bool imagePath;
  bool cropImagePath;
  bool width;
  bool height;
} _ImageDaemon_cropImage_args__isset;

class ImageDaemon_cropImage_args {
 public:

  ImageDaemon_cropImage_args() : imagePath(""), cropImagePath(""), width(0), height(0) {
  }

  virtual ~ImageDaemon_cropImage_args() throw() {}

  std::string imagePath;
  std::string cropImagePath;
  int32_t width;
  int32_t height;

  _ImageDaemon_cropImage_args__isset __isset;

  void __set_imagePath(const std::string& val) {
    imagePath = val;
  }

  void __set_cropImagePath(const std::string& val) {
    cropImagePath = val;
  }

  void __set_width(const int32_t val) {
    width = val;
  }

  void __set_height(const int32_t val) {
    height = val;
  }

  bool operator == (const ImageDaemon_cropImage_args & rhs) const
  {
    if (!(imagePath == rhs.imagePath))
      return false;
    if (!(cropImagePath == rhs.cropImagePath))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const ImageDaemon_cropImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_cropImage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_cropImage_pargs {
 public:


  virtual ~ImageDaemon_cropImage_pargs() throw() {}

  const std::string* imagePath;
  const std::string* cropImagePath;
  const int32_t* width;
  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_cropImage_result {
 public:

  ImageDaemon_cropImage_result() {
  }

  virtual ~ImageDaemon_cropImage_result() throw() {}


  bool operator == (const ImageDaemon_cropImage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImageDaemon_cropImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageDaemon_cropImage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageDaemon_cropImage_presult {
 public:


  virtual ~ImageDaemon_cropImage_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImageDaemonClient : virtual public ImageDaemonIf {
 public:
  ImageDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ImageDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void computeBoWFeature(std::vector<Bin> & _return, const int64_t rowKey);
  void send_computeBoWFeature(const int64_t rowKey);
  void recv_computeBoWFeature(std::vector<Bin> & _return);
  void computeColorFeature(const int64_t rowKey);
  void send_computeColorFeature(const int64_t rowKey);
  void recv_computeColorFeature();
  void computeShapeFeature(const int64_t rowKey);
  void send_computeShapeFeature(const int64_t rowKey);
  void recv_computeShapeFeature();
  void query(std::vector<std::string> & _return, const std::string& imagePath);
  void send_query(const std::string& imagePath);
  void recv_query(std::vector<std::string> & _return);
  void addImage(const std::string& imageHash, const int64_t rowKey);
  void send_addImage(const std::string& imageHash, const int64_t rowKey);
  void recv_addImage();
  void indexImage(const std::string& imageHash, const int64_t rowKey);
  void send_indexImage(const std::string& imageHash, const int64_t rowKey);
  void recv_indexImage();
  void cropImage(const std::string& imagePath, const std::string& cropImagePath, const int32_t width, const int32_t height);
  void send_cropImage(const std::string& imagePath, const std::string& cropImagePath, const int32_t width, const int32_t height);
  void recv_cropImage();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImageDaemonProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<ImageDaemonIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (ImageDaemonProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_computeBoWFeature(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_computeColorFeature(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_computeShapeFeature(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addImage(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_indexImage(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cropImage(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImageDaemonProcessor(boost::shared_ptr<ImageDaemonIf> iface) :
    iface_(iface) {
    processMap_["computeBoWFeature"] = &ImageDaemonProcessor::process_computeBoWFeature;
    processMap_["computeColorFeature"] = &ImageDaemonProcessor::process_computeColorFeature;
    processMap_["computeShapeFeature"] = &ImageDaemonProcessor::process_computeShapeFeature;
    processMap_["query"] = &ImageDaemonProcessor::process_query;
    processMap_["addImage"] = &ImageDaemonProcessor::process_addImage;
    processMap_["indexImage"] = &ImageDaemonProcessor::process_indexImage;
    processMap_["cropImage"] = &ImageDaemonProcessor::process_cropImage;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~ImageDaemonProcessor() {}
};

class ImageDaemonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImageDaemonProcessorFactory(const ::boost::shared_ptr< ImageDaemonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ImageDaemonIfFactory > handlerFactory_;
};

class ImageDaemonMultiface : virtual public ImageDaemonIf {
 public:
  ImageDaemonMultiface(std::vector<boost::shared_ptr<ImageDaemonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImageDaemonMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImageDaemonIf> > ifaces_;
  ImageDaemonMultiface() {}
  void add(boost::shared_ptr<ImageDaemonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void computeBoWFeature(std::vector<Bin> & _return, const int64_t rowKey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->computeBoWFeature(_return, rowKey);
        return;
      } else {
        ifaces_[i]->computeBoWFeature(_return, rowKey);
      }
    }
  }

  void computeColorFeature(const int64_t rowKey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->computeColorFeature(rowKey);
    }
  }

  void computeShapeFeature(const int64_t rowKey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->computeShapeFeature(rowKey);
    }
  }

  void query(std::vector<std::string> & _return, const std::string& imagePath) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->query(_return, imagePath);
        return;
      } else {
        ifaces_[i]->query(_return, imagePath);
      }
    }
  }

  void addImage(const std::string& imageHash, const int64_t rowKey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->addImage(imageHash, rowKey);
    }
  }

  void indexImage(const std::string& imageHash, const int64_t rowKey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->indexImage(imageHash, rowKey);
    }
  }

  void cropImage(const std::string& imagePath, const std::string& cropImagePath, const int32_t width, const int32_t height) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->cropImage(imagePath, cropImagePath, width, height);
    }
  }

};

}} // namespace

#endif
