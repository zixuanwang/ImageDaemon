// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ANNTreeDaemon.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::net::walnutvision;

class ANNTreeDaemonHandler : virtual public ANNTreeDaemonIf {
 public:
  ANNTreeDaemonHandler() {
    // Your initialization goes here
  }

  void clear() {
    // Your implementation goes here
    printf("clear\n");
  }

  int32_t addTree() {
    // Your implementation goes here
    printf("addTree\n");
  }

  void loadSample(const int32_t treeIndex, const std::string& sampleArray, const int32_t sampleCount) {
    // Your implementation goes here
    printf("loadSample\n");
  }

  void addFeature(const int32_t treeIndex, const int64_t id, const std::string& feature) {
    // Your implementation goes here
    printf("addFeature\n");
  }

  void index(const int32_t treeIndex) {
    // Your implementation goes here
    printf("index\n");
  }

  void knnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k) {
    // Your implementation goes here
    printf("knnSearch\n");
  }

  void similarSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const int64_t id, const int32_t k) {
    // Your implementation goes here
    printf("similarSearch\n");
  }

  void slaveClear() {
    // Your implementation goes here
    printf("slaveClear\n");
  }

  int32_t slaveAddTree() {
    // Your implementation goes here
    printf("slaveAddTree\n");
  }

  void slaveInit(const int32_t treeIndex) {
    // Your implementation goes here
    printf("slaveInit\n");
  }

  void slaveAddFeature(const int32_t treeIndex, const int64_t id, const std::string& feature) {
    // Your implementation goes here
    printf("slaveAddFeature\n");
  }

  void slaveIndex(const int32_t treeIndex) {
    // Your implementation goes here
    printf("slaveIndex\n");
  }

  void slaveKnnSearch(std::vector<Neighbor> & _return, const int32_t treeIndex, const std::string& feature, const int32_t k) {
    // Your implementation goes here
    printf("slaveKnnSearch\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ANNTreeDaemonHandler> handler(new ANNTreeDaemonHandler());
  shared_ptr<TProcessor> processor(new ANNTreeDaemonProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

