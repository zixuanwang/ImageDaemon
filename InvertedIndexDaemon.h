/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InvertedIndexDaemon_H
#define InvertedIndexDaemon_H

#include <TProcessor.h>
#include "InvertedIndexDaemon_types.h"

namespace InvertedIndexDaemon {

class InvertedIndexDaemonIf {
 public:
  virtual ~InvertedIndexDaemonIf() {}
  virtual void init() = 0;
  virtual void savePostingList(const int64_t visualwordId, const std::vector<Posting> & postingArray) = 0;
  virtual void loadPostingList(std::vector<Posting> & _return, const int64_t visualwordId) = 0;
  virtual void addPosting(const int64_t visualwordId, const Posting& posting) = 0;
};

class InvertedIndexDaemonIfFactory {
 public:
  typedef InvertedIndexDaemonIf Handler;

  virtual ~InvertedIndexDaemonIfFactory() {}

  virtual InvertedIndexDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InvertedIndexDaemonIf* /* handler */) = 0;
};

class InvertedIndexDaemonIfSingletonFactory : virtual public InvertedIndexDaemonIfFactory {
 public:
  InvertedIndexDaemonIfSingletonFactory(const boost::shared_ptr<InvertedIndexDaemonIf>& iface) : iface_(iface) {}
  virtual ~InvertedIndexDaemonIfSingletonFactory() {}

  virtual InvertedIndexDaemonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InvertedIndexDaemonIf* /* handler */) {}

 protected:
  boost::shared_ptr<InvertedIndexDaemonIf> iface_;
};

class InvertedIndexDaemonNull : virtual public InvertedIndexDaemonIf {
 public:
  virtual ~InvertedIndexDaemonNull() {}
  void init() {
    return;
  }
  void savePostingList(const int64_t /* visualwordId */, const std::vector<Posting> & /* postingArray */) {
    return;
  }
  void loadPostingList(std::vector<Posting> & /* _return */, const int64_t /* visualwordId */) {
    return;
  }
  void addPosting(const int64_t /* visualwordId */, const Posting& /* posting */) {
    return;
  }
};


class InvertedIndexDaemon_init_args {
 public:

  InvertedIndexDaemon_init_args() {
  }

  virtual ~InvertedIndexDaemon_init_args() throw() {}


  bool operator == (const InvertedIndexDaemon_init_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InvertedIndexDaemon_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_init_pargs {
 public:


  virtual ~InvertedIndexDaemon_init_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_init_result {
 public:

  InvertedIndexDaemon_init_result() {
  }

  virtual ~InvertedIndexDaemon_init_result() throw() {}


  bool operator == (const InvertedIndexDaemon_init_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InvertedIndexDaemon_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_init_presult {
 public:


  virtual ~InvertedIndexDaemon_init_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InvertedIndexDaemon_savePostingList_args__isset {
  _InvertedIndexDaemon_savePostingList_args__isset() : visualwordId(false), postingArray(false) {}
  bool visualwordId;
  bool postingArray;
} _InvertedIndexDaemon_savePostingList_args__isset;

class InvertedIndexDaemon_savePostingList_args {
 public:

  InvertedIndexDaemon_savePostingList_args() : visualwordId(0) {
  }

  virtual ~InvertedIndexDaemon_savePostingList_args() throw() {}

  int64_t visualwordId;
  std::vector<Posting>  postingArray;

  _InvertedIndexDaemon_savePostingList_args__isset __isset;

  void __set_visualwordId(const int64_t val) {
    visualwordId = val;
  }

  void __set_postingArray(const std::vector<Posting> & val) {
    postingArray = val;
  }

  bool operator == (const InvertedIndexDaemon_savePostingList_args & rhs) const
  {
    if (!(visualwordId == rhs.visualwordId))
      return false;
    if (!(postingArray == rhs.postingArray))
      return false;
    return true;
  }
  bool operator != (const InvertedIndexDaemon_savePostingList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_savePostingList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_savePostingList_pargs {
 public:


  virtual ~InvertedIndexDaemon_savePostingList_pargs() throw() {}

  const int64_t* visualwordId;
  const std::vector<Posting> * postingArray;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_savePostingList_result {
 public:

  InvertedIndexDaemon_savePostingList_result() {
  }

  virtual ~InvertedIndexDaemon_savePostingList_result() throw() {}


  bool operator == (const InvertedIndexDaemon_savePostingList_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InvertedIndexDaemon_savePostingList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_savePostingList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_savePostingList_presult {
 public:


  virtual ~InvertedIndexDaemon_savePostingList_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InvertedIndexDaemon_loadPostingList_args__isset {
  _InvertedIndexDaemon_loadPostingList_args__isset() : visualwordId(false) {}
  bool visualwordId;
} _InvertedIndexDaemon_loadPostingList_args__isset;

class InvertedIndexDaemon_loadPostingList_args {
 public:

  InvertedIndexDaemon_loadPostingList_args() : visualwordId(0) {
  }

  virtual ~InvertedIndexDaemon_loadPostingList_args() throw() {}

  int64_t visualwordId;

  _InvertedIndexDaemon_loadPostingList_args__isset __isset;

  void __set_visualwordId(const int64_t val) {
    visualwordId = val;
  }

  bool operator == (const InvertedIndexDaemon_loadPostingList_args & rhs) const
  {
    if (!(visualwordId == rhs.visualwordId))
      return false;
    return true;
  }
  bool operator != (const InvertedIndexDaemon_loadPostingList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_loadPostingList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_loadPostingList_pargs {
 public:


  virtual ~InvertedIndexDaemon_loadPostingList_pargs() throw() {}

  const int64_t* visualwordId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InvertedIndexDaemon_loadPostingList_result__isset {
  _InvertedIndexDaemon_loadPostingList_result__isset() : success(false) {}
  bool success;
} _InvertedIndexDaemon_loadPostingList_result__isset;

class InvertedIndexDaemon_loadPostingList_result {
 public:

  InvertedIndexDaemon_loadPostingList_result() {
  }

  virtual ~InvertedIndexDaemon_loadPostingList_result() throw() {}

  std::vector<Posting>  success;

  _InvertedIndexDaemon_loadPostingList_result__isset __isset;

  void __set_success(const std::vector<Posting> & val) {
    success = val;
  }

  bool operator == (const InvertedIndexDaemon_loadPostingList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InvertedIndexDaemon_loadPostingList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_loadPostingList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InvertedIndexDaemon_loadPostingList_presult__isset {
  _InvertedIndexDaemon_loadPostingList_presult__isset() : success(false) {}
  bool success;
} _InvertedIndexDaemon_loadPostingList_presult__isset;

class InvertedIndexDaemon_loadPostingList_presult {
 public:


  virtual ~InvertedIndexDaemon_loadPostingList_presult() throw() {}

  std::vector<Posting> * success;

  _InvertedIndexDaemon_loadPostingList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InvertedIndexDaemon_addPosting_args__isset {
  _InvertedIndexDaemon_addPosting_args__isset() : visualwordId(false), posting(false) {}
  bool visualwordId;
  bool posting;
} _InvertedIndexDaemon_addPosting_args__isset;

class InvertedIndexDaemon_addPosting_args {
 public:

  InvertedIndexDaemon_addPosting_args() : visualwordId(0) {
  }

  virtual ~InvertedIndexDaemon_addPosting_args() throw() {}

  int64_t visualwordId;
  Posting posting;

  _InvertedIndexDaemon_addPosting_args__isset __isset;

  void __set_visualwordId(const int64_t val) {
    visualwordId = val;
  }

  void __set_posting(const Posting& val) {
    posting = val;
  }

  bool operator == (const InvertedIndexDaemon_addPosting_args & rhs) const
  {
    if (!(visualwordId == rhs.visualwordId))
      return false;
    if (!(posting == rhs.posting))
      return false;
    return true;
  }
  bool operator != (const InvertedIndexDaemon_addPosting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_addPosting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_addPosting_pargs {
 public:


  virtual ~InvertedIndexDaemon_addPosting_pargs() throw() {}

  const int64_t* visualwordId;
  const Posting* posting;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_addPosting_result {
 public:

  InvertedIndexDaemon_addPosting_result() {
  }

  virtual ~InvertedIndexDaemon_addPosting_result() throw() {}


  bool operator == (const InvertedIndexDaemon_addPosting_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InvertedIndexDaemon_addPosting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvertedIndexDaemon_addPosting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InvertedIndexDaemon_addPosting_presult {
 public:


  virtual ~InvertedIndexDaemon_addPosting_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InvertedIndexDaemonClient : virtual public InvertedIndexDaemonIf {
 public:
  InvertedIndexDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  InvertedIndexDaemonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void init();
  void send_init();
  void recv_init();
  void savePostingList(const int64_t visualwordId, const std::vector<Posting> & postingArray);
  void send_savePostingList(const int64_t visualwordId, const std::vector<Posting> & postingArray);
  void recv_savePostingList();
  void loadPostingList(std::vector<Posting> & _return, const int64_t visualwordId);
  void send_loadPostingList(const int64_t visualwordId);
  void recv_loadPostingList(std::vector<Posting> & _return);
  void addPosting(const int64_t visualwordId, const Posting& posting);
  void send_addPosting(const int64_t visualwordId, const Posting& posting);
  void recv_addPosting();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InvertedIndexDaemonProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<InvertedIndexDaemonIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (InvertedIndexDaemonProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_init(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePostingList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadPostingList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addPosting(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InvertedIndexDaemonProcessor(boost::shared_ptr<InvertedIndexDaemonIf> iface) :
    iface_(iface) {
    processMap_["init"] = &InvertedIndexDaemonProcessor::process_init;
    processMap_["savePostingList"] = &InvertedIndexDaemonProcessor::process_savePostingList;
    processMap_["loadPostingList"] = &InvertedIndexDaemonProcessor::process_loadPostingList;
    processMap_["addPosting"] = &InvertedIndexDaemonProcessor::process_addPosting;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~InvertedIndexDaemonProcessor() {}
};

class InvertedIndexDaemonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InvertedIndexDaemonProcessorFactory(const ::boost::shared_ptr< InvertedIndexDaemonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InvertedIndexDaemonIfFactory > handlerFactory_;
};

class InvertedIndexDaemonMultiface : virtual public InvertedIndexDaemonIf {
 public:
  InvertedIndexDaemonMultiface(std::vector<boost::shared_ptr<InvertedIndexDaemonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InvertedIndexDaemonMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InvertedIndexDaemonIf> > ifaces_;
  InvertedIndexDaemonMultiface() {}
  void add(boost::shared_ptr<InvertedIndexDaemonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void init() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->init();
    }
  }

  void savePostingList(const int64_t visualwordId, const std::vector<Posting> & postingArray) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->savePostingList(visualwordId, postingArray);
    }
  }

  void loadPostingList(std::vector<Posting> & _return, const int64_t visualwordId) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->loadPostingList(_return, visualwordId);
        return;
      } else {
        ifaces_[i]->loadPostingList(_return, visualwordId);
      }
    }
  }

  void addPosting(const int64_t visualwordId, const Posting& posting) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->addPosting(visualwordId, posting);
    }
  }

};

} // namespace

#endif
