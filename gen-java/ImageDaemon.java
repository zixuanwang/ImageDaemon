/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ImageDaemon {

  public interface Iface {

    public List<Bin> getBoWFeature(long rowKey) throws org.apache.thrift.TException;

    public void computeColorFeature(long rowKey) throws org.apache.thrift.TException;

    public List<String> query(String imagePath) throws org.apache.thrift.TException;

    public void addImage(String imageHash, long rowKey) throws org.apache.thrift.TException;

    public void indexImage(String imageHash, long rowKey) throws org.apache.thrift.TException;

    public void cropImage(String imagePath, String cropImagePath, int width, int height) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getBoWFeature(long rowKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBoWFeature_call> resultHandler) throws org.apache.thrift.TException;

    public void computeColorFeature(long rowKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.computeColorFeature_call> resultHandler) throws org.apache.thrift.TException;

    public void query(String imagePath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.query_call> resultHandler) throws org.apache.thrift.TException;

    public void addImage(String imageHash, long rowKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addImage_call> resultHandler) throws org.apache.thrift.TException;

    public void indexImage(String imageHash, long rowKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.indexImage_call> resultHandler) throws org.apache.thrift.TException;

    public void cropImage(String imagePath, String cropImagePath, int width, int height, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cropImage_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Bin> getBoWFeature(long rowKey) throws org.apache.thrift.TException
    {
      send_getBoWFeature(rowKey);
      return recv_getBoWFeature();
    }

    public void send_getBoWFeature(long rowKey) throws org.apache.thrift.TException
    {
      getBoWFeature_args args = new getBoWFeature_args();
      args.setRowKey(rowKey);
      sendBase("getBoWFeature", args);
    }

    public List<Bin> recv_getBoWFeature() throws org.apache.thrift.TException
    {
      getBoWFeature_result result = new getBoWFeature_result();
      receiveBase(result, "getBoWFeature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBoWFeature failed: unknown result");
    }

    public void computeColorFeature(long rowKey) throws org.apache.thrift.TException
    {
      send_computeColorFeature(rowKey);
      recv_computeColorFeature();
    }

    public void send_computeColorFeature(long rowKey) throws org.apache.thrift.TException
    {
      computeColorFeature_args args = new computeColorFeature_args();
      args.setRowKey(rowKey);
      sendBase("computeColorFeature", args);
    }

    public void recv_computeColorFeature() throws org.apache.thrift.TException
    {
      computeColorFeature_result result = new computeColorFeature_result();
      receiveBase(result, "computeColorFeature");
      return;
    }

    public List<String> query(String imagePath) throws org.apache.thrift.TException
    {
      send_query(imagePath);
      return recv_query();
    }

    public void send_query(String imagePath) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setImagePath(imagePath);
      sendBase("query", args);
    }

    public List<String> recv_query() throws org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public void addImage(String imageHash, long rowKey) throws org.apache.thrift.TException
    {
      send_addImage(imageHash, rowKey);
      recv_addImage();
    }

    public void send_addImage(String imageHash, long rowKey) throws org.apache.thrift.TException
    {
      addImage_args args = new addImage_args();
      args.setImageHash(imageHash);
      args.setRowKey(rowKey);
      sendBase("addImage", args);
    }

    public void recv_addImage() throws org.apache.thrift.TException
    {
      addImage_result result = new addImage_result();
      receiveBase(result, "addImage");
      return;
    }

    public void indexImage(String imageHash, long rowKey) throws org.apache.thrift.TException
    {
      send_indexImage(imageHash, rowKey);
      recv_indexImage();
    }

    public void send_indexImage(String imageHash, long rowKey) throws org.apache.thrift.TException
    {
      indexImage_args args = new indexImage_args();
      args.setImageHash(imageHash);
      args.setRowKey(rowKey);
      sendBase("indexImage", args);
    }

    public void recv_indexImage() throws org.apache.thrift.TException
    {
      indexImage_result result = new indexImage_result();
      receiveBase(result, "indexImage");
      return;
    }

    public void cropImage(String imagePath, String cropImagePath, int width, int height) throws org.apache.thrift.TException
    {
      send_cropImage(imagePath, cropImagePath, width, height);
      recv_cropImage();
    }

    public void send_cropImage(String imagePath, String cropImagePath, int width, int height) throws org.apache.thrift.TException
    {
      cropImage_args args = new cropImage_args();
      args.setImagePath(imagePath);
      args.setCropImagePath(cropImagePath);
      args.setWidth(width);
      args.setHeight(height);
      sendBase("cropImage", args);
    }

    public void recv_cropImage() throws org.apache.thrift.TException
    {
      cropImage_result result = new cropImage_result();
      receiveBase(result, "cropImage");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getBoWFeature(long rowKey, org.apache.thrift.async.AsyncMethodCallback<getBoWFeature_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBoWFeature_call method_call = new getBoWFeature_call(rowKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBoWFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rowKey;
      public getBoWFeature_call(long rowKey, org.apache.thrift.async.AsyncMethodCallback<getBoWFeature_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowKey = rowKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBoWFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBoWFeature_args args = new getBoWFeature_args();
        args.setRowKey(rowKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Bin> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBoWFeature();
      }
    }

    public void computeColorFeature(long rowKey, org.apache.thrift.async.AsyncMethodCallback<computeColorFeature_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeColorFeature_call method_call = new computeColorFeature_call(rowKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeColorFeature_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rowKey;
      public computeColorFeature_call(long rowKey, org.apache.thrift.async.AsyncMethodCallback<computeColorFeature_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowKey = rowKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeColorFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeColorFeature_args args = new computeColorFeature_args();
        args.setRowKey(rowKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_computeColorFeature();
      }
    }

    public void query(String imagePath, org.apache.thrift.async.AsyncMethodCallback<query_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(imagePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imagePath;
      public query_call(String imagePath, org.apache.thrift.async.AsyncMethodCallback<query_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imagePath = imagePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setImagePath(imagePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void addImage(String imageHash, long rowKey, org.apache.thrift.async.AsyncMethodCallback<addImage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addImage_call method_call = new addImage_call(imageHash, rowKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addImage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imageHash;
      private long rowKey;
      public addImage_call(String imageHash, long rowKey, org.apache.thrift.async.AsyncMethodCallback<addImage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imageHash = imageHash;
        this.rowKey = rowKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addImage_args args = new addImage_args();
        args.setImageHash(imageHash);
        args.setRowKey(rowKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addImage();
      }
    }

    public void indexImage(String imageHash, long rowKey, org.apache.thrift.async.AsyncMethodCallback<indexImage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      indexImage_call method_call = new indexImage_call(imageHash, rowKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class indexImage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imageHash;
      private long rowKey;
      public indexImage_call(String imageHash, long rowKey, org.apache.thrift.async.AsyncMethodCallback<indexImage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imageHash = imageHash;
        this.rowKey = rowKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("indexImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        indexImage_args args = new indexImage_args();
        args.setImageHash(imageHash);
        args.setRowKey(rowKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_indexImage();
      }
    }

    public void cropImage(String imagePath, String cropImagePath, int width, int height, org.apache.thrift.async.AsyncMethodCallback<cropImage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cropImage_call method_call = new cropImage_call(imagePath, cropImagePath, width, height, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cropImage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imagePath;
      private String cropImagePath;
      private int width;
      private int height;
      public cropImage_call(String imagePath, String cropImagePath, int width, int height, org.apache.thrift.async.AsyncMethodCallback<cropImage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imagePath = imagePath;
        this.cropImagePath = cropImagePath;
        this.width = width;
        this.height = height;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cropImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cropImage_args args = new cropImage_args();
        args.setImagePath(imagePath);
        args.setCropImagePath(cropImagePath);
        args.setWidth(width);
        args.setHeight(height);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cropImage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getBoWFeature", new getBoWFeature());
      processMap.put("computeColorFeature", new computeColorFeature());
      processMap.put("query", new query());
      processMap.put("addImage", new addImage());
      processMap.put("indexImage", new indexImage());
      processMap.put("cropImage", new cropImage());
      return processMap;
    }

    private static class getBoWFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBoWFeature_args> {
      public getBoWFeature() {
        super("getBoWFeature");
      }

      protected getBoWFeature_args getEmptyArgsInstance() {
        return new getBoWFeature_args();
      }

      protected getBoWFeature_result getResult(I iface, getBoWFeature_args args) throws org.apache.thrift.TException {
        getBoWFeature_result result = new getBoWFeature_result();
        result.success = iface.getBoWFeature(args.rowKey);
        return result;
      }
    }

    private static class computeColorFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeColorFeature_args> {
      public computeColorFeature() {
        super("computeColorFeature");
      }

      protected computeColorFeature_args getEmptyArgsInstance() {
        return new computeColorFeature_args();
      }

      protected computeColorFeature_result getResult(I iface, computeColorFeature_args args) throws org.apache.thrift.TException {
        computeColorFeature_result result = new computeColorFeature_result();
        iface.computeColorFeature(args.rowKey);
        return result;
      }
    }

    private static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      protected query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        result.success = iface.query(args.imagePath);
        return result;
      }
    }

    private static class addImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addImage_args> {
      public addImage() {
        super("addImage");
      }

      protected addImage_args getEmptyArgsInstance() {
        return new addImage_args();
      }

      protected addImage_result getResult(I iface, addImage_args args) throws org.apache.thrift.TException {
        addImage_result result = new addImage_result();
        iface.addImage(args.imageHash, args.rowKey);
        return result;
      }
    }

    private static class indexImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, indexImage_args> {
      public indexImage() {
        super("indexImage");
      }

      protected indexImage_args getEmptyArgsInstance() {
        return new indexImage_args();
      }

      protected indexImage_result getResult(I iface, indexImage_args args) throws org.apache.thrift.TException {
        indexImage_result result = new indexImage_result();
        iface.indexImage(args.imageHash, args.rowKey);
        return result;
      }
    }

    private static class cropImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cropImage_args> {
      public cropImage() {
        super("cropImage");
      }

      protected cropImage_args getEmptyArgsInstance() {
        return new cropImage_args();
      }

      protected cropImage_result getResult(I iface, cropImage_args args) throws org.apache.thrift.TException {
        cropImage_result result = new cropImage_result();
        iface.cropImage(args.imagePath, args.cropImagePath, args.width, args.height);
        return result;
      }
    }

  }

  public static class getBoWFeature_args implements org.apache.thrift.TBase<getBoWFeature_args, getBoWFeature_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBoWFeature_args");

    private static final org.apache.thrift.protocol.TField ROW_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowKey", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBoWFeature_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBoWFeature_argsTupleSchemeFactory());
    }

    public long rowKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROW_KEY((short)1, "rowKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROW_KEY
            return ROW_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROW_KEY, new org.apache.thrift.meta_data.FieldMetaData("rowKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBoWFeature_args.class, metaDataMap);
    }

    public getBoWFeature_args() {
    }

    public getBoWFeature_args(
      long rowKey)
    {
      this();
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBoWFeature_args(getBoWFeature_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.rowKey = other.rowKey;
    }

    public getBoWFeature_args deepCopy() {
      return new getBoWFeature_args(this);
    }

    @Override
    public void clear() {
      setRowKeyIsSet(false);
      this.rowKey = 0;
    }

    public long getRowKey() {
      return this.rowKey;
    }

    public getBoWFeature_args setRowKey(long rowKey) {
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
      return this;
    }

    public void unsetRowKey() {
      __isset_bit_vector.clear(__ROWKEY_ISSET_ID);
    }

    /** Returns true if field rowKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowKey() {
      return __isset_bit_vector.get(__ROWKEY_ISSET_ID);
    }

    public void setRowKeyIsSet(boolean value) {
      __isset_bit_vector.set(__ROWKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROW_KEY:
        if (value == null) {
          unsetRowKey();
        } else {
          setRowKey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROW_KEY:
        return Long.valueOf(getRowKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROW_KEY:
        return isSetRowKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBoWFeature_args)
        return this.equals((getBoWFeature_args)that);
      return false;
    }

    public boolean equals(getBoWFeature_args that) {
      if (that == null)
        return false;

      boolean this_present_rowKey = true;
      boolean that_present_rowKey = true;
      if (this_present_rowKey || that_present_rowKey) {
        if (!(this_present_rowKey && that_present_rowKey))
          return false;
        if (this.rowKey != that.rowKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBoWFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBoWFeature_args typedOther = (getBoWFeature_args)other;

      lastComparison = Boolean.valueOf(isSetRowKey()).compareTo(typedOther.isSetRowKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowKey, typedOther.rowKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBoWFeature_args(");
      boolean first = true;

      sb.append("rowKey:");
      sb.append(this.rowKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBoWFeature_argsStandardSchemeFactory implements SchemeFactory {
      public getBoWFeature_argsStandardScheme getScheme() {
        return new getBoWFeature_argsStandardScheme();
      }
    }

    private static class getBoWFeature_argsStandardScheme extends StandardScheme<getBoWFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBoWFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROW_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowKey = iprot.readI64();
                struct.setRowKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBoWFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROW_KEY_FIELD_DESC);
        oprot.writeI64(struct.rowKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBoWFeature_argsTupleSchemeFactory implements SchemeFactory {
      public getBoWFeature_argsTupleScheme getScheme() {
        return new getBoWFeature_argsTupleScheme();
      }
    }

    private static class getBoWFeature_argsTupleScheme extends TupleScheme<getBoWFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBoWFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRowKey()) {
          oprot.writeI64(struct.rowKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBoWFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rowKey = iprot.readI64();
          struct.setRowKeyIsSet(true);
        }
      }
    }

  }

  public static class getBoWFeature_result implements org.apache.thrift.TBase<getBoWFeature_result, getBoWFeature_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBoWFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBoWFeature_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBoWFeature_resultTupleSchemeFactory());
    }

    public List<Bin> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bin.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBoWFeature_result.class, metaDataMap);
    }

    public getBoWFeature_result() {
    }

    public getBoWFeature_result(
      List<Bin> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBoWFeature_result(getBoWFeature_result other) {
      if (other.isSetSuccess()) {
        List<Bin> __this__success = new ArrayList<Bin>();
        for (Bin other_element : other.success) {
          __this__success.add(new Bin(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBoWFeature_result deepCopy() {
      return new getBoWFeature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Bin> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Bin elem) {
      if (this.success == null) {
        this.success = new ArrayList<Bin>();
      }
      this.success.add(elem);
    }

    public List<Bin> getSuccess() {
      return this.success;
    }

    public getBoWFeature_result setSuccess(List<Bin> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Bin>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBoWFeature_result)
        return this.equals((getBoWFeature_result)that);
      return false;
    }

    public boolean equals(getBoWFeature_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBoWFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBoWFeature_result typedOther = (getBoWFeature_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBoWFeature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBoWFeature_resultStandardSchemeFactory implements SchemeFactory {
      public getBoWFeature_resultStandardScheme getScheme() {
        return new getBoWFeature_resultStandardScheme();
      }
    }

    private static class getBoWFeature_resultStandardScheme extends StandardScheme<getBoWFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBoWFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Bin>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Bin _elem2; // required
                    _elem2 = new Bin();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBoWFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Bin _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBoWFeature_resultTupleSchemeFactory implements SchemeFactory {
      public getBoWFeature_resultTupleScheme getScheme() {
        return new getBoWFeature_resultTupleScheme();
      }
    }

    private static class getBoWFeature_resultTupleScheme extends TupleScheme<getBoWFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBoWFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Bin _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBoWFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Bin>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Bin _elem7; // required
              _elem7 = new Bin();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class computeColorFeature_args implements org.apache.thrift.TBase<computeColorFeature_args, computeColorFeature_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeColorFeature_args");

    private static final org.apache.thrift.protocol.TField ROW_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowKey", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new computeColorFeature_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new computeColorFeature_argsTupleSchemeFactory());
    }

    public long rowKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROW_KEY((short)1, "rowKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROW_KEY
            return ROW_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROW_KEY, new org.apache.thrift.meta_data.FieldMetaData("rowKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeColorFeature_args.class, metaDataMap);
    }

    public computeColorFeature_args() {
    }

    public computeColorFeature_args(
      long rowKey)
    {
      this();
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeColorFeature_args(computeColorFeature_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.rowKey = other.rowKey;
    }

    public computeColorFeature_args deepCopy() {
      return new computeColorFeature_args(this);
    }

    @Override
    public void clear() {
      setRowKeyIsSet(false);
      this.rowKey = 0;
    }

    public long getRowKey() {
      return this.rowKey;
    }

    public computeColorFeature_args setRowKey(long rowKey) {
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
      return this;
    }

    public void unsetRowKey() {
      __isset_bit_vector.clear(__ROWKEY_ISSET_ID);
    }

    /** Returns true if field rowKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowKey() {
      return __isset_bit_vector.get(__ROWKEY_ISSET_ID);
    }

    public void setRowKeyIsSet(boolean value) {
      __isset_bit_vector.set(__ROWKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROW_KEY:
        if (value == null) {
          unsetRowKey();
        } else {
          setRowKey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROW_KEY:
        return Long.valueOf(getRowKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROW_KEY:
        return isSetRowKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof computeColorFeature_args)
        return this.equals((computeColorFeature_args)that);
      return false;
    }

    public boolean equals(computeColorFeature_args that) {
      if (that == null)
        return false;

      boolean this_present_rowKey = true;
      boolean that_present_rowKey = true;
      if (this_present_rowKey || that_present_rowKey) {
        if (!(this_present_rowKey && that_present_rowKey))
          return false;
        if (this.rowKey != that.rowKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(computeColorFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      computeColorFeature_args typedOther = (computeColorFeature_args)other;

      lastComparison = Boolean.valueOf(isSetRowKey()).compareTo(typedOther.isSetRowKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowKey, typedOther.rowKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("computeColorFeature_args(");
      boolean first = true;

      sb.append("rowKey:");
      sb.append(this.rowKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeColorFeature_argsStandardSchemeFactory implements SchemeFactory {
      public computeColorFeature_argsStandardScheme getScheme() {
        return new computeColorFeature_argsStandardScheme();
      }
    }

    private static class computeColorFeature_argsStandardScheme extends StandardScheme<computeColorFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeColorFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROW_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowKey = iprot.readI64();
                struct.setRowKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeColorFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROW_KEY_FIELD_DESC);
        oprot.writeI64(struct.rowKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeColorFeature_argsTupleSchemeFactory implements SchemeFactory {
      public computeColorFeature_argsTupleScheme getScheme() {
        return new computeColorFeature_argsTupleScheme();
      }
    }

    private static class computeColorFeature_argsTupleScheme extends TupleScheme<computeColorFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeColorFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRowKey()) {
          oprot.writeI64(struct.rowKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeColorFeature_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rowKey = iprot.readI64();
          struct.setRowKeyIsSet(true);
        }
      }
    }

  }

  public static class computeColorFeature_result implements org.apache.thrift.TBase<computeColorFeature_result, computeColorFeature_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeColorFeature_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new computeColorFeature_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new computeColorFeature_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeColorFeature_result.class, metaDataMap);
    }

    public computeColorFeature_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeColorFeature_result(computeColorFeature_result other) {
    }

    public computeColorFeature_result deepCopy() {
      return new computeColorFeature_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof computeColorFeature_result)
        return this.equals((computeColorFeature_result)that);
      return false;
    }

    public boolean equals(computeColorFeature_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(computeColorFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      computeColorFeature_result typedOther = (computeColorFeature_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("computeColorFeature_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeColorFeature_resultStandardSchemeFactory implements SchemeFactory {
      public computeColorFeature_resultStandardScheme getScheme() {
        return new computeColorFeature_resultStandardScheme();
      }
    }

    private static class computeColorFeature_resultStandardScheme extends StandardScheme<computeColorFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeColorFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeColorFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeColorFeature_resultTupleSchemeFactory implements SchemeFactory {
      public computeColorFeature_resultTupleScheme getScheme() {
        return new computeColorFeature_resultTupleScheme();
      }
    }

    private static class computeColorFeature_resultTupleScheme extends TupleScheme<computeColorFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeColorFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeColorFeature_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField IMAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("imagePath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public String imagePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_PATH((short)1, "imagePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_PATH
            return IMAGE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("imagePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      String imagePath)
    {
      this();
      this.imagePath = imagePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetImagePath()) {
        this.imagePath = other.imagePath;
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.imagePath = null;
    }

    public String getImagePath() {
      return this.imagePath;
    }

    public query_args setImagePath(String imagePath) {
      this.imagePath = imagePath;
      return this;
    }

    public void unsetImagePath() {
      this.imagePath = null;
    }

    /** Returns true if field imagePath is set (has been assigned a value) and false otherwise */
    public boolean isSetImagePath() {
      return this.imagePath != null;
    }

    public void setImagePathIsSet(boolean value) {
      if (!value) {
        this.imagePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_PATH:
        if (value == null) {
          unsetImagePath();
        } else {
          setImagePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_PATH:
        return getImagePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_PATH:
        return isSetImagePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_imagePath = true && this.isSetImagePath();
      boolean that_present_imagePath = true && that.isSetImagePath();
      if (this_present_imagePath || that_present_imagePath) {
        if (!(this_present_imagePath && that_present_imagePath))
          return false;
        if (!this.imagePath.equals(that.imagePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_args typedOther = (query_args)other;

      lastComparison = Boolean.valueOf(isSetImagePath()).compareTo(typedOther.isSetImagePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImagePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagePath, typedOther.imagePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("imagePath:");
      if (this.imagePath == null) {
        sb.append("null");
      } else {
        sb.append(this.imagePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imagePath = iprot.readString();
                struct.setImagePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imagePath != null) {
          oprot.writeFieldBegin(IMAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.imagePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImagePath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetImagePath()) {
          oprot.writeString(struct.imagePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.imagePath = iprot.readString();
          struct.setImagePathIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public query_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_result typedOther = (query_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addImage_args implements org.apache.thrift.TBase<addImage_args, addImage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addImage_args");

    private static final org.apache.thrift.protocol.TField IMAGE_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("imageHash", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROW_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowKey", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addImage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addImage_argsTupleSchemeFactory());
    }

    public String imageHash; // required
    public long rowKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_HASH((short)1, "imageHash"),
      ROW_KEY((short)2, "rowKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_HASH
            return IMAGE_HASH;
          case 2: // ROW_KEY
            return ROW_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_HASH, new org.apache.thrift.meta_data.FieldMetaData("imageHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW_KEY, new org.apache.thrift.meta_data.FieldMetaData("rowKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addImage_args.class, metaDataMap);
    }

    public addImage_args() {
    }

    public addImage_args(
      String imageHash,
      long rowKey)
    {
      this();
      this.imageHash = imageHash;
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addImage_args(addImage_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetImageHash()) {
        this.imageHash = other.imageHash;
      }
      this.rowKey = other.rowKey;
    }

    public addImage_args deepCopy() {
      return new addImage_args(this);
    }

    @Override
    public void clear() {
      this.imageHash = null;
      setRowKeyIsSet(false);
      this.rowKey = 0;
    }

    public String getImageHash() {
      return this.imageHash;
    }

    public addImage_args setImageHash(String imageHash) {
      this.imageHash = imageHash;
      return this;
    }

    public void unsetImageHash() {
      this.imageHash = null;
    }

    /** Returns true if field imageHash is set (has been assigned a value) and false otherwise */
    public boolean isSetImageHash() {
      return this.imageHash != null;
    }

    public void setImageHashIsSet(boolean value) {
      if (!value) {
        this.imageHash = null;
      }
    }

    public long getRowKey() {
      return this.rowKey;
    }

    public addImage_args setRowKey(long rowKey) {
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
      return this;
    }

    public void unsetRowKey() {
      __isset_bit_vector.clear(__ROWKEY_ISSET_ID);
    }

    /** Returns true if field rowKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowKey() {
      return __isset_bit_vector.get(__ROWKEY_ISSET_ID);
    }

    public void setRowKeyIsSet(boolean value) {
      __isset_bit_vector.set(__ROWKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_HASH:
        if (value == null) {
          unsetImageHash();
        } else {
          setImageHash((String)value);
        }
        break;

      case ROW_KEY:
        if (value == null) {
          unsetRowKey();
        } else {
          setRowKey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_HASH:
        return getImageHash();

      case ROW_KEY:
        return Long.valueOf(getRowKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_HASH:
        return isSetImageHash();
      case ROW_KEY:
        return isSetRowKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addImage_args)
        return this.equals((addImage_args)that);
      return false;
    }

    public boolean equals(addImage_args that) {
      if (that == null)
        return false;

      boolean this_present_imageHash = true && this.isSetImageHash();
      boolean that_present_imageHash = true && that.isSetImageHash();
      if (this_present_imageHash || that_present_imageHash) {
        if (!(this_present_imageHash && that_present_imageHash))
          return false;
        if (!this.imageHash.equals(that.imageHash))
          return false;
      }

      boolean this_present_rowKey = true;
      boolean that_present_rowKey = true;
      if (this_present_rowKey || that_present_rowKey) {
        if (!(this_present_rowKey && that_present_rowKey))
          return false;
        if (this.rowKey != that.rowKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addImage_args typedOther = (addImage_args)other;

      lastComparison = Boolean.valueOf(isSetImageHash()).compareTo(typedOther.isSetImageHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageHash, typedOther.imageHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRowKey()).compareTo(typedOther.isSetRowKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowKey, typedOther.rowKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addImage_args(");
      boolean first = true;

      sb.append("imageHash:");
      if (this.imageHash == null) {
        sb.append("null");
      } else {
        sb.append(this.imageHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rowKey:");
      sb.append(this.rowKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addImage_argsStandardSchemeFactory implements SchemeFactory {
      public addImage_argsStandardScheme getScheme() {
        return new addImage_argsStandardScheme();
      }
    }

    private static class addImage_argsStandardScheme extends StandardScheme<addImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageHash = iprot.readString();
                struct.setImageHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROW_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowKey = iprot.readI64();
                struct.setRowKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imageHash != null) {
          oprot.writeFieldBegin(IMAGE_HASH_FIELD_DESC);
          oprot.writeString(struct.imageHash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROW_KEY_FIELD_DESC);
        oprot.writeI64(struct.rowKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addImage_argsTupleSchemeFactory implements SchemeFactory {
      public addImage_argsTupleScheme getScheme() {
        return new addImage_argsTupleScheme();
      }
    }

    private static class addImage_argsTupleScheme extends TupleScheme<addImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImageHash()) {
          optionals.set(0);
        }
        if (struct.isSetRowKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImageHash()) {
          oprot.writeString(struct.imageHash);
        }
        if (struct.isSetRowKey()) {
          oprot.writeI64(struct.rowKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.imageHash = iprot.readString();
          struct.setImageHashIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rowKey = iprot.readI64();
          struct.setRowKeyIsSet(true);
        }
      }
    }

  }

  public static class addImage_result implements org.apache.thrift.TBase<addImage_result, addImage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addImage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addImage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addImage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addImage_result.class, metaDataMap);
    }

    public addImage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addImage_result(addImage_result other) {
    }

    public addImage_result deepCopy() {
      return new addImage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addImage_result)
        return this.equals((addImage_result)that);
      return false;
    }

    public boolean equals(addImage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addImage_result typedOther = (addImage_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addImage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addImage_resultStandardSchemeFactory implements SchemeFactory {
      public addImage_resultStandardScheme getScheme() {
        return new addImage_resultStandardScheme();
      }
    }

    private static class addImage_resultStandardScheme extends StandardScheme<addImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addImage_resultTupleSchemeFactory implements SchemeFactory {
      public addImage_resultTupleScheme getScheme() {
        return new addImage_resultTupleScheme();
      }
    }

    private static class addImage_resultTupleScheme extends TupleScheme<addImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class indexImage_args implements org.apache.thrift.TBase<indexImage_args, indexImage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("indexImage_args");

    private static final org.apache.thrift.protocol.TField IMAGE_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("imageHash", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROW_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowKey", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new indexImage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new indexImage_argsTupleSchemeFactory());
    }

    public String imageHash; // required
    public long rowKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_HASH((short)1, "imageHash"),
      ROW_KEY((short)2, "rowKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_HASH
            return IMAGE_HASH;
          case 2: // ROW_KEY
            return ROW_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROWKEY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_HASH, new org.apache.thrift.meta_data.FieldMetaData("imageHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW_KEY, new org.apache.thrift.meta_data.FieldMetaData("rowKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(indexImage_args.class, metaDataMap);
    }

    public indexImage_args() {
    }

    public indexImage_args(
      String imageHash,
      long rowKey)
    {
      this();
      this.imageHash = imageHash;
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public indexImage_args(indexImage_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetImageHash()) {
        this.imageHash = other.imageHash;
      }
      this.rowKey = other.rowKey;
    }

    public indexImage_args deepCopy() {
      return new indexImage_args(this);
    }

    @Override
    public void clear() {
      this.imageHash = null;
      setRowKeyIsSet(false);
      this.rowKey = 0;
    }

    public String getImageHash() {
      return this.imageHash;
    }

    public indexImage_args setImageHash(String imageHash) {
      this.imageHash = imageHash;
      return this;
    }

    public void unsetImageHash() {
      this.imageHash = null;
    }

    /** Returns true if field imageHash is set (has been assigned a value) and false otherwise */
    public boolean isSetImageHash() {
      return this.imageHash != null;
    }

    public void setImageHashIsSet(boolean value) {
      if (!value) {
        this.imageHash = null;
      }
    }

    public long getRowKey() {
      return this.rowKey;
    }

    public indexImage_args setRowKey(long rowKey) {
      this.rowKey = rowKey;
      setRowKeyIsSet(true);
      return this;
    }

    public void unsetRowKey() {
      __isset_bit_vector.clear(__ROWKEY_ISSET_ID);
    }

    /** Returns true if field rowKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowKey() {
      return __isset_bit_vector.get(__ROWKEY_ISSET_ID);
    }

    public void setRowKeyIsSet(boolean value) {
      __isset_bit_vector.set(__ROWKEY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_HASH:
        if (value == null) {
          unsetImageHash();
        } else {
          setImageHash((String)value);
        }
        break;

      case ROW_KEY:
        if (value == null) {
          unsetRowKey();
        } else {
          setRowKey((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_HASH:
        return getImageHash();

      case ROW_KEY:
        return Long.valueOf(getRowKey());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_HASH:
        return isSetImageHash();
      case ROW_KEY:
        return isSetRowKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof indexImage_args)
        return this.equals((indexImage_args)that);
      return false;
    }

    public boolean equals(indexImage_args that) {
      if (that == null)
        return false;

      boolean this_present_imageHash = true && this.isSetImageHash();
      boolean that_present_imageHash = true && that.isSetImageHash();
      if (this_present_imageHash || that_present_imageHash) {
        if (!(this_present_imageHash && that_present_imageHash))
          return false;
        if (!this.imageHash.equals(that.imageHash))
          return false;
      }

      boolean this_present_rowKey = true;
      boolean that_present_rowKey = true;
      if (this_present_rowKey || that_present_rowKey) {
        if (!(this_present_rowKey && that_present_rowKey))
          return false;
        if (this.rowKey != that.rowKey)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(indexImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      indexImage_args typedOther = (indexImage_args)other;

      lastComparison = Boolean.valueOf(isSetImageHash()).compareTo(typedOther.isSetImageHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageHash, typedOther.imageHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRowKey()).compareTo(typedOther.isSetRowKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowKey, typedOther.rowKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("indexImage_args(");
      boolean first = true;

      sb.append("imageHash:");
      if (this.imageHash == null) {
        sb.append("null");
      } else {
        sb.append(this.imageHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rowKey:");
      sb.append(this.rowKey);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class indexImage_argsStandardSchemeFactory implements SchemeFactory {
      public indexImage_argsStandardScheme getScheme() {
        return new indexImage_argsStandardScheme();
      }
    }

    private static class indexImage_argsStandardScheme extends StandardScheme<indexImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, indexImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageHash = iprot.readString();
                struct.setImageHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROW_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rowKey = iprot.readI64();
                struct.setRowKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, indexImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imageHash != null) {
          oprot.writeFieldBegin(IMAGE_HASH_FIELD_DESC);
          oprot.writeString(struct.imageHash);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROW_KEY_FIELD_DESC);
        oprot.writeI64(struct.rowKey);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class indexImage_argsTupleSchemeFactory implements SchemeFactory {
      public indexImage_argsTupleScheme getScheme() {
        return new indexImage_argsTupleScheme();
      }
    }

    private static class indexImage_argsTupleScheme extends TupleScheme<indexImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, indexImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImageHash()) {
          optionals.set(0);
        }
        if (struct.isSetRowKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImageHash()) {
          oprot.writeString(struct.imageHash);
        }
        if (struct.isSetRowKey()) {
          oprot.writeI64(struct.rowKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, indexImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.imageHash = iprot.readString();
          struct.setImageHashIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rowKey = iprot.readI64();
          struct.setRowKeyIsSet(true);
        }
      }
    }

  }

  public static class indexImage_result implements org.apache.thrift.TBase<indexImage_result, indexImage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("indexImage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new indexImage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new indexImage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(indexImage_result.class, metaDataMap);
    }

    public indexImage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public indexImage_result(indexImage_result other) {
    }

    public indexImage_result deepCopy() {
      return new indexImage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof indexImage_result)
        return this.equals((indexImage_result)that);
      return false;
    }

    public boolean equals(indexImage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(indexImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      indexImage_result typedOther = (indexImage_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("indexImage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class indexImage_resultStandardSchemeFactory implements SchemeFactory {
      public indexImage_resultStandardScheme getScheme() {
        return new indexImage_resultStandardScheme();
      }
    }

    private static class indexImage_resultStandardScheme extends StandardScheme<indexImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, indexImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, indexImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class indexImage_resultTupleSchemeFactory implements SchemeFactory {
      public indexImage_resultTupleScheme getScheme() {
        return new indexImage_resultTupleScheme();
      }
    }

    private static class indexImage_resultTupleScheme extends TupleScheme<indexImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, indexImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, indexImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class cropImage_args implements org.apache.thrift.TBase<cropImage_args, cropImage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cropImage_args");

    private static final org.apache.thrift.protocol.TField IMAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("imagePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CROP_IMAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("cropImagePath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cropImage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cropImage_argsTupleSchemeFactory());
    }

    public String imagePath; // required
    public String cropImagePath; // required
    public int width; // required
    public int height; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_PATH((short)1, "imagePath"),
      CROP_IMAGE_PATH((short)2, "cropImagePath"),
      WIDTH((short)3, "width"),
      HEIGHT((short)4, "height");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_PATH
            return IMAGE_PATH;
          case 2: // CROP_IMAGE_PATH
            return CROP_IMAGE_PATH;
          case 3: // WIDTH
            return WIDTH;
          case 4: // HEIGHT
            return HEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WIDTH_ISSET_ID = 0;
    private static final int __HEIGHT_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("imagePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CROP_IMAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("cropImagePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cropImage_args.class, metaDataMap);
    }

    public cropImage_args() {
    }

    public cropImage_args(
      String imagePath,
      String cropImagePath,
      int width,
      int height)
    {
      this();
      this.imagePath = imagePath;
      this.cropImagePath = cropImagePath;
      this.width = width;
      setWidthIsSet(true);
      this.height = height;
      setHeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cropImage_args(cropImage_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetImagePath()) {
        this.imagePath = other.imagePath;
      }
      if (other.isSetCropImagePath()) {
        this.cropImagePath = other.cropImagePath;
      }
      this.width = other.width;
      this.height = other.height;
    }

    public cropImage_args deepCopy() {
      return new cropImage_args(this);
    }

    @Override
    public void clear() {
      this.imagePath = null;
      this.cropImagePath = null;
      setWidthIsSet(false);
      this.width = 0;
      setHeightIsSet(false);
      this.height = 0;
    }

    public String getImagePath() {
      return this.imagePath;
    }

    public cropImage_args setImagePath(String imagePath) {
      this.imagePath = imagePath;
      return this;
    }

    public void unsetImagePath() {
      this.imagePath = null;
    }

    /** Returns true if field imagePath is set (has been assigned a value) and false otherwise */
    public boolean isSetImagePath() {
      return this.imagePath != null;
    }

    public void setImagePathIsSet(boolean value) {
      if (!value) {
        this.imagePath = null;
      }
    }

    public String getCropImagePath() {
      return this.cropImagePath;
    }

    public cropImage_args setCropImagePath(String cropImagePath) {
      this.cropImagePath = cropImagePath;
      return this;
    }

    public void unsetCropImagePath() {
      this.cropImagePath = null;
    }

    /** Returns true if field cropImagePath is set (has been assigned a value) and false otherwise */
    public boolean isSetCropImagePath() {
      return this.cropImagePath != null;
    }

    public void setCropImagePathIsSet(boolean value) {
      if (!value) {
        this.cropImagePath = null;
      }
    }

    public int getWidth() {
      return this.width;
    }

    public cropImage_args setWidth(int width) {
      this.width = width;
      setWidthIsSet(true);
      return this;
    }

    public void unsetWidth() {
      __isset_bit_vector.clear(__WIDTH_ISSET_ID);
    }

    /** Returns true if field width is set (has been assigned a value) and false otherwise */
    public boolean isSetWidth() {
      return __isset_bit_vector.get(__WIDTH_ISSET_ID);
    }

    public void setWidthIsSet(boolean value) {
      __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
    }

    public int getHeight() {
      return this.height;
    }

    public cropImage_args setHeight(int height) {
      this.height = height;
      setHeightIsSet(true);
      return this;
    }

    public void unsetHeight() {
      __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
    }

    /** Returns true if field height is set (has been assigned a value) and false otherwise */
    public boolean isSetHeight() {
      return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
    }

    public void setHeightIsSet(boolean value) {
      __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_PATH:
        if (value == null) {
          unsetImagePath();
        } else {
          setImagePath((String)value);
        }
        break;

      case CROP_IMAGE_PATH:
        if (value == null) {
          unsetCropImagePath();
        } else {
          setCropImagePath((String)value);
        }
        break;

      case WIDTH:
        if (value == null) {
          unsetWidth();
        } else {
          setWidth((Integer)value);
        }
        break;

      case HEIGHT:
        if (value == null) {
          unsetHeight();
        } else {
          setHeight((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_PATH:
        return getImagePath();

      case CROP_IMAGE_PATH:
        return getCropImagePath();

      case WIDTH:
        return Integer.valueOf(getWidth());

      case HEIGHT:
        return Integer.valueOf(getHeight());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_PATH:
        return isSetImagePath();
      case CROP_IMAGE_PATH:
        return isSetCropImagePath();
      case WIDTH:
        return isSetWidth();
      case HEIGHT:
        return isSetHeight();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cropImage_args)
        return this.equals((cropImage_args)that);
      return false;
    }

    public boolean equals(cropImage_args that) {
      if (that == null)
        return false;

      boolean this_present_imagePath = true && this.isSetImagePath();
      boolean that_present_imagePath = true && that.isSetImagePath();
      if (this_present_imagePath || that_present_imagePath) {
        if (!(this_present_imagePath && that_present_imagePath))
          return false;
        if (!this.imagePath.equals(that.imagePath))
          return false;
      }

      boolean this_present_cropImagePath = true && this.isSetCropImagePath();
      boolean that_present_cropImagePath = true && that.isSetCropImagePath();
      if (this_present_cropImagePath || that_present_cropImagePath) {
        if (!(this_present_cropImagePath && that_present_cropImagePath))
          return false;
        if (!this.cropImagePath.equals(that.cropImagePath))
          return false;
      }

      boolean this_present_width = true;
      boolean that_present_width = true;
      if (this_present_width || that_present_width) {
        if (!(this_present_width && that_present_width))
          return false;
        if (this.width != that.width)
          return false;
      }

      boolean this_present_height = true;
      boolean that_present_height = true;
      if (this_present_height || that_present_height) {
        if (!(this_present_height && that_present_height))
          return false;
        if (this.height != that.height)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cropImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cropImage_args typedOther = (cropImage_args)other;

      lastComparison = Boolean.valueOf(isSetImagePath()).compareTo(typedOther.isSetImagePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImagePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagePath, typedOther.imagePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCropImagePath()).compareTo(typedOther.isSetCropImagePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCropImagePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cropImagePath, typedOther.cropImagePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWidth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cropImage_args(");
      boolean first = true;

      sb.append("imagePath:");
      if (this.imagePath == null) {
        sb.append("null");
      } else {
        sb.append(this.imagePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cropImagePath:");
      if (this.cropImagePath == null) {
        sb.append("null");
      } else {
        sb.append(this.cropImagePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cropImage_argsStandardSchemeFactory implements SchemeFactory {
      public cropImage_argsStandardScheme getScheme() {
        return new cropImage_argsStandardScheme();
      }
    }

    private static class cropImage_argsStandardScheme extends StandardScheme<cropImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cropImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imagePath = iprot.readString();
                struct.setImagePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CROP_IMAGE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cropImagePath = iprot.readString();
                struct.setCropImagePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WIDTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.width = iprot.readI32();
                struct.setWidthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.height = iprot.readI32();
                struct.setHeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cropImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imagePath != null) {
          oprot.writeFieldBegin(IMAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.imagePath);
          oprot.writeFieldEnd();
        }
        if (struct.cropImagePath != null) {
          oprot.writeFieldBegin(CROP_IMAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.cropImagePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WIDTH_FIELD_DESC);
        oprot.writeI32(struct.width);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cropImage_argsTupleSchemeFactory implements SchemeFactory {
      public cropImage_argsTupleScheme getScheme() {
        return new cropImage_argsTupleScheme();
      }
    }

    private static class cropImage_argsTupleScheme extends TupleScheme<cropImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cropImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImagePath()) {
          optionals.set(0);
        }
        if (struct.isSetCropImagePath()) {
          optionals.set(1);
        }
        if (struct.isSetWidth()) {
          optionals.set(2);
        }
        if (struct.isSetHeight()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetImagePath()) {
          oprot.writeString(struct.imagePath);
        }
        if (struct.isSetCropImagePath()) {
          oprot.writeString(struct.cropImagePath);
        }
        if (struct.isSetWidth()) {
          oprot.writeI32(struct.width);
        }
        if (struct.isSetHeight()) {
          oprot.writeI32(struct.height);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cropImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.imagePath = iprot.readString();
          struct.setImagePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cropImagePath = iprot.readString();
          struct.setCropImagePathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.width = iprot.readI32();
          struct.setWidthIsSet(true);
        }
        if (incoming.get(3)) {
          struct.height = iprot.readI32();
          struct.setHeightIsSet(true);
        }
      }
    }

  }

  public static class cropImage_result implements org.apache.thrift.TBase<cropImage_result, cropImage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cropImage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cropImage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cropImage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cropImage_result.class, metaDataMap);
    }

    public cropImage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cropImage_result(cropImage_result other) {
    }

    public cropImage_result deepCopy() {
      return new cropImage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cropImage_result)
        return this.equals((cropImage_result)that);
      return false;
    }

    public boolean equals(cropImage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cropImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cropImage_result typedOther = (cropImage_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cropImage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cropImage_resultStandardSchemeFactory implements SchemeFactory {
      public cropImage_resultStandardScheme getScheme() {
        return new cropImage_resultStandardScheme();
      }
    }

    private static class cropImage_resultStandardScheme extends StandardScheme<cropImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cropImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cropImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cropImage_resultTupleSchemeFactory implements SchemeFactory {
      public cropImage_resultTupleScheme getScheme() {
        return new cropImage_resultTupleScheme();
      }
    }

    private static class cropImage_resultTupleScheme extends TupleScheme<cropImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cropImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cropImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
