/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InvertedIndexDaemon {

  public interface Iface {

    public void init() throws org.apache.thrift.TException;

    public void savePostingList(long visualwordId, List<Posting> postingArray) throws org.apache.thrift.TException;

    public List<Posting> loadPostingList(long visualwordId) throws org.apache.thrift.TException;

    public void addPosting(long visualwordId, Posting posting) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void init(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.init_call> resultHandler) throws org.apache.thrift.TException;

    public void savePostingList(long visualwordId, List<Posting> postingArray, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.savePostingList_call> resultHandler) throws org.apache.thrift.TException;

    public void loadPostingList(long visualwordId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadPostingList_call> resultHandler) throws org.apache.thrift.TException;

    public void addPosting(long visualwordId, Posting posting, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPosting_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void init() throws org.apache.thrift.TException
    {
      send_init();
      recv_init();
    }

    public void send_init() throws org.apache.thrift.TException
    {
      init_args args = new init_args();
      sendBase("init", args);
    }

    public void recv_init() throws org.apache.thrift.TException
    {
      init_result result = new init_result();
      receiveBase(result, "init");
      return;
    }

    public void savePostingList(long visualwordId, List<Posting> postingArray) throws org.apache.thrift.TException
    {
      send_savePostingList(visualwordId, postingArray);
      recv_savePostingList();
    }

    public void send_savePostingList(long visualwordId, List<Posting> postingArray) throws org.apache.thrift.TException
    {
      savePostingList_args args = new savePostingList_args();
      args.setVisualwordId(visualwordId);
      args.setPostingArray(postingArray);
      sendBase("savePostingList", args);
    }

    public void recv_savePostingList() throws org.apache.thrift.TException
    {
      savePostingList_result result = new savePostingList_result();
      receiveBase(result, "savePostingList");
      return;
    }

    public List<Posting> loadPostingList(long visualwordId) throws org.apache.thrift.TException
    {
      send_loadPostingList(visualwordId);
      return recv_loadPostingList();
    }

    public void send_loadPostingList(long visualwordId) throws org.apache.thrift.TException
    {
      loadPostingList_args args = new loadPostingList_args();
      args.setVisualwordId(visualwordId);
      sendBase("loadPostingList", args);
    }

    public List<Posting> recv_loadPostingList() throws org.apache.thrift.TException
    {
      loadPostingList_result result = new loadPostingList_result();
      receiveBase(result, "loadPostingList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadPostingList failed: unknown result");
    }

    public void addPosting(long visualwordId, Posting posting) throws org.apache.thrift.TException
    {
      send_addPosting(visualwordId, posting);
      recv_addPosting();
    }

    public void send_addPosting(long visualwordId, Posting posting) throws org.apache.thrift.TException
    {
      addPosting_args args = new addPosting_args();
      args.setVisualwordId(visualwordId);
      args.setPosting(posting);
      sendBase("addPosting", args);
    }

    public void recv_addPosting() throws org.apache.thrift.TException
    {
      addPosting_result result = new addPosting_result();
      receiveBase(result, "addPosting");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void init(org.apache.thrift.async.AsyncMethodCallback<init_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      init_call method_call = new init_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class init_call extends org.apache.thrift.async.TAsyncMethodCall {
      public init_call(org.apache.thrift.async.AsyncMethodCallback<init_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("init", org.apache.thrift.protocol.TMessageType.CALL, 0));
        init_args args = new init_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_init();
      }
    }

    public void savePostingList(long visualwordId, List<Posting> postingArray, org.apache.thrift.async.AsyncMethodCallback<savePostingList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      savePostingList_call method_call = new savePostingList_call(visualwordId, postingArray, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class savePostingList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long visualwordId;
      private List<Posting> postingArray;
      public savePostingList_call(long visualwordId, List<Posting> postingArray, org.apache.thrift.async.AsyncMethodCallback<savePostingList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.visualwordId = visualwordId;
        this.postingArray = postingArray;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("savePostingList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        savePostingList_args args = new savePostingList_args();
        args.setVisualwordId(visualwordId);
        args.setPostingArray(postingArray);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_savePostingList();
      }
    }

    public void loadPostingList(long visualwordId, org.apache.thrift.async.AsyncMethodCallback<loadPostingList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadPostingList_call method_call = new loadPostingList_call(visualwordId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadPostingList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long visualwordId;
      public loadPostingList_call(long visualwordId, org.apache.thrift.async.AsyncMethodCallback<loadPostingList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.visualwordId = visualwordId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadPostingList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadPostingList_args args = new loadPostingList_args();
        args.setVisualwordId(visualwordId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Posting> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadPostingList();
      }
    }

    public void addPosting(long visualwordId, Posting posting, org.apache.thrift.async.AsyncMethodCallback<addPosting_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPosting_call method_call = new addPosting_call(visualwordId, posting, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPosting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long visualwordId;
      private Posting posting;
      public addPosting_call(long visualwordId, Posting posting, org.apache.thrift.async.AsyncMethodCallback<addPosting_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.visualwordId = visualwordId;
        this.posting = posting;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPosting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPosting_args args = new addPosting_args();
        args.setVisualwordId(visualwordId);
        args.setPosting(posting);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addPosting();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("init", new init());
      processMap.put("savePostingList", new savePostingList());
      processMap.put("loadPostingList", new loadPostingList());
      processMap.put("addPosting", new addPosting());
      return processMap;
    }

    private static class init<I extends Iface> extends org.apache.thrift.ProcessFunction<I, init_args> {
      public init() {
        super("init");
      }

      protected init_args getEmptyArgsInstance() {
        return new init_args();
      }

      protected init_result getResult(I iface, init_args args) throws org.apache.thrift.TException {
        init_result result = new init_result();
        iface.init();
        return result;
      }
    }

    private static class savePostingList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, savePostingList_args> {
      public savePostingList() {
        super("savePostingList");
      }

      protected savePostingList_args getEmptyArgsInstance() {
        return new savePostingList_args();
      }

      protected savePostingList_result getResult(I iface, savePostingList_args args) throws org.apache.thrift.TException {
        savePostingList_result result = new savePostingList_result();
        iface.savePostingList(args.visualwordId, args.postingArray);
        return result;
      }
    }

    private static class loadPostingList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadPostingList_args> {
      public loadPostingList() {
        super("loadPostingList");
      }

      protected loadPostingList_args getEmptyArgsInstance() {
        return new loadPostingList_args();
      }

      protected loadPostingList_result getResult(I iface, loadPostingList_args args) throws org.apache.thrift.TException {
        loadPostingList_result result = new loadPostingList_result();
        result.success = iface.loadPostingList(args.visualwordId);
        return result;
      }
    }

    private static class addPosting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPosting_args> {
      public addPosting() {
        super("addPosting");
      }

      protected addPosting_args getEmptyArgsInstance() {
        return new addPosting_args();
      }

      protected addPosting_result getResult(I iface, addPosting_args args) throws org.apache.thrift.TException {
        addPosting_result result = new addPosting_result();
        iface.addPosting(args.visualwordId, args.posting);
        return result;
      }
    }

  }

  public static class init_args implements org.apache.thrift.TBase<init_args, init_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_args.class, metaDataMap);
    }

    public init_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_args(init_args other) {
    }

    public init_args deepCopy() {
      return new init_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_args)
        return this.equals((init_args)that);
      return false;
    }

    public boolean equals(init_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(init_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      init_args typedOther = (init_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_argsStandardSchemeFactory implements SchemeFactory {
      public init_argsStandardScheme getScheme() {
        return new init_argsStandardScheme();
      }
    }

    private static class init_argsStandardScheme extends StandardScheme<init_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_argsTupleSchemeFactory implements SchemeFactory {
      public init_argsTupleScheme getScheme() {
        return new init_argsTupleScheme();
      }
    }

    private static class init_argsTupleScheme extends TupleScheme<init_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class init_result implements org.apache.thrift.TBase<init_result, init_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("init_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new init_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new init_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(init_result.class, metaDataMap);
    }

    public init_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public init_result(init_result other) {
    }

    public init_result deepCopy() {
      return new init_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof init_result)
        return this.equals((init_result)that);
      return false;
    }

    public boolean equals(init_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(init_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      init_result typedOther = (init_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("init_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class init_resultStandardSchemeFactory implements SchemeFactory {
      public init_resultStandardScheme getScheme() {
        return new init_resultStandardScheme();
      }
    }

    private static class init_resultStandardScheme extends StandardScheme<init_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, init_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, init_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class init_resultTupleSchemeFactory implements SchemeFactory {
      public init_resultTupleScheme getScheme() {
        return new init_resultTupleScheme();
      }
    }

    private static class init_resultTupleScheme extends TupleScheme<init_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, init_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class savePostingList_args implements org.apache.thrift.TBase<savePostingList_args, savePostingList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savePostingList_args");

    private static final org.apache.thrift.protocol.TField VISUALWORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("visualwordId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField POSTING_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("postingArray", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savePostingList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savePostingList_argsTupleSchemeFactory());
    }

    public long visualwordId; // required
    public List<Posting> postingArray; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VISUALWORD_ID((short)1, "visualwordId"),
      POSTING_ARRAY((short)2, "postingArray");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VISUALWORD_ID
            return VISUALWORD_ID;
          case 2: // POSTING_ARRAY
            return POSTING_ARRAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VISUALWORDID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VISUALWORD_ID, new org.apache.thrift.meta_data.FieldMetaData("visualwordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.POSTING_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("postingArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Posting.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savePostingList_args.class, metaDataMap);
    }

    public savePostingList_args() {
    }

    public savePostingList_args(
      long visualwordId,
      List<Posting> postingArray)
    {
      this();
      this.visualwordId = visualwordId;
      setVisualwordIdIsSet(true);
      this.postingArray = postingArray;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savePostingList_args(savePostingList_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.visualwordId = other.visualwordId;
      if (other.isSetPostingArray()) {
        List<Posting> __this__postingArray = new ArrayList<Posting>();
        for (Posting other_element : other.postingArray) {
          __this__postingArray.add(new Posting(other_element));
        }
        this.postingArray = __this__postingArray;
      }
    }

    public savePostingList_args deepCopy() {
      return new savePostingList_args(this);
    }

    @Override
    public void clear() {
      setVisualwordIdIsSet(false);
      this.visualwordId = 0;
      this.postingArray = null;
    }

    public long getVisualwordId() {
      return this.visualwordId;
    }

    public savePostingList_args setVisualwordId(long visualwordId) {
      this.visualwordId = visualwordId;
      setVisualwordIdIsSet(true);
      return this;
    }

    public void unsetVisualwordId() {
      __isset_bit_vector.clear(__VISUALWORDID_ISSET_ID);
    }

    /** Returns true if field visualwordId is set (has been assigned a value) and false otherwise */
    public boolean isSetVisualwordId() {
      return __isset_bit_vector.get(__VISUALWORDID_ISSET_ID);
    }

    public void setVisualwordIdIsSet(boolean value) {
      __isset_bit_vector.set(__VISUALWORDID_ISSET_ID, value);
    }

    public int getPostingArraySize() {
      return (this.postingArray == null) ? 0 : this.postingArray.size();
    }

    public java.util.Iterator<Posting> getPostingArrayIterator() {
      return (this.postingArray == null) ? null : this.postingArray.iterator();
    }

    public void addToPostingArray(Posting elem) {
      if (this.postingArray == null) {
        this.postingArray = new ArrayList<Posting>();
      }
      this.postingArray.add(elem);
    }

    public List<Posting> getPostingArray() {
      return this.postingArray;
    }

    public savePostingList_args setPostingArray(List<Posting> postingArray) {
      this.postingArray = postingArray;
      return this;
    }

    public void unsetPostingArray() {
      this.postingArray = null;
    }

    /** Returns true if field postingArray is set (has been assigned a value) and false otherwise */
    public boolean isSetPostingArray() {
      return this.postingArray != null;
    }

    public void setPostingArrayIsSet(boolean value) {
      if (!value) {
        this.postingArray = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VISUALWORD_ID:
        if (value == null) {
          unsetVisualwordId();
        } else {
          setVisualwordId((Long)value);
        }
        break;

      case POSTING_ARRAY:
        if (value == null) {
          unsetPostingArray();
        } else {
          setPostingArray((List<Posting>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VISUALWORD_ID:
        return Long.valueOf(getVisualwordId());

      case POSTING_ARRAY:
        return getPostingArray();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VISUALWORD_ID:
        return isSetVisualwordId();
      case POSTING_ARRAY:
        return isSetPostingArray();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savePostingList_args)
        return this.equals((savePostingList_args)that);
      return false;
    }

    public boolean equals(savePostingList_args that) {
      if (that == null)
        return false;

      boolean this_present_visualwordId = true;
      boolean that_present_visualwordId = true;
      if (this_present_visualwordId || that_present_visualwordId) {
        if (!(this_present_visualwordId && that_present_visualwordId))
          return false;
        if (this.visualwordId != that.visualwordId)
          return false;
      }

      boolean this_present_postingArray = true && this.isSetPostingArray();
      boolean that_present_postingArray = true && that.isSetPostingArray();
      if (this_present_postingArray || that_present_postingArray) {
        if (!(this_present_postingArray && that_present_postingArray))
          return false;
        if (!this.postingArray.equals(that.postingArray))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(savePostingList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      savePostingList_args typedOther = (savePostingList_args)other;

      lastComparison = Boolean.valueOf(isSetVisualwordId()).compareTo(typedOther.isSetVisualwordId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisualwordId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visualwordId, typedOther.visualwordId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPostingArray()).compareTo(typedOther.isSetPostingArray());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostingArray()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postingArray, typedOther.postingArray);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savePostingList_args(");
      boolean first = true;

      sb.append("visualwordId:");
      sb.append(this.visualwordId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("postingArray:");
      if (this.postingArray == null) {
        sb.append("null");
      } else {
        sb.append(this.postingArray);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savePostingList_argsStandardSchemeFactory implements SchemeFactory {
      public savePostingList_argsStandardScheme getScheme() {
        return new savePostingList_argsStandardScheme();
      }
    }

    private static class savePostingList_argsStandardScheme extends StandardScheme<savePostingList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savePostingList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VISUALWORD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.visualwordId = iprot.readI64();
                struct.setVisualwordIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSTING_ARRAY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.postingArray = new ArrayList<Posting>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Posting _elem2; // required
                    _elem2 = new Posting();
                    _elem2.read(iprot);
                    struct.postingArray.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setPostingArrayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savePostingList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VISUALWORD_ID_FIELD_DESC);
        oprot.writeI64(struct.visualwordId);
        oprot.writeFieldEnd();
        if (struct.postingArray != null) {
          oprot.writeFieldBegin(POSTING_ARRAY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.postingArray.size()));
            for (Posting _iter3 : struct.postingArray)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savePostingList_argsTupleSchemeFactory implements SchemeFactory {
      public savePostingList_argsTupleScheme getScheme() {
        return new savePostingList_argsTupleScheme();
      }
    }

    private static class savePostingList_argsTupleScheme extends TupleScheme<savePostingList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savePostingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVisualwordId()) {
          optionals.set(0);
        }
        if (struct.isSetPostingArray()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVisualwordId()) {
          oprot.writeI64(struct.visualwordId);
        }
        if (struct.isSetPostingArray()) {
          {
            oprot.writeI32(struct.postingArray.size());
            for (Posting _iter4 : struct.postingArray)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savePostingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.visualwordId = iprot.readI64();
          struct.setVisualwordIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.postingArray = new ArrayList<Posting>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Posting _elem7; // required
              _elem7 = new Posting();
              _elem7.read(iprot);
              struct.postingArray.add(_elem7);
            }
          }
          struct.setPostingArrayIsSet(true);
        }
      }
    }

  }

  public static class savePostingList_result implements org.apache.thrift.TBase<savePostingList_result, savePostingList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savePostingList_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savePostingList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savePostingList_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savePostingList_result.class, metaDataMap);
    }

    public savePostingList_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savePostingList_result(savePostingList_result other) {
    }

    public savePostingList_result deepCopy() {
      return new savePostingList_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savePostingList_result)
        return this.equals((savePostingList_result)that);
      return false;
    }

    public boolean equals(savePostingList_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(savePostingList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      savePostingList_result typedOther = (savePostingList_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savePostingList_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savePostingList_resultStandardSchemeFactory implements SchemeFactory {
      public savePostingList_resultStandardScheme getScheme() {
        return new savePostingList_resultStandardScheme();
      }
    }

    private static class savePostingList_resultStandardScheme extends StandardScheme<savePostingList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savePostingList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savePostingList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savePostingList_resultTupleSchemeFactory implements SchemeFactory {
      public savePostingList_resultTupleScheme getScheme() {
        return new savePostingList_resultTupleScheme();
      }
    }

    private static class savePostingList_resultTupleScheme extends TupleScheme<savePostingList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savePostingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savePostingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class loadPostingList_args implements org.apache.thrift.TBase<loadPostingList_args, loadPostingList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadPostingList_args");

    private static final org.apache.thrift.protocol.TField VISUALWORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("visualwordId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadPostingList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadPostingList_argsTupleSchemeFactory());
    }

    public long visualwordId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VISUALWORD_ID((short)1, "visualwordId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VISUALWORD_ID
            return VISUALWORD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VISUALWORDID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VISUALWORD_ID, new org.apache.thrift.meta_data.FieldMetaData("visualwordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadPostingList_args.class, metaDataMap);
    }

    public loadPostingList_args() {
    }

    public loadPostingList_args(
      long visualwordId)
    {
      this();
      this.visualwordId = visualwordId;
      setVisualwordIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadPostingList_args(loadPostingList_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.visualwordId = other.visualwordId;
    }

    public loadPostingList_args deepCopy() {
      return new loadPostingList_args(this);
    }

    @Override
    public void clear() {
      setVisualwordIdIsSet(false);
      this.visualwordId = 0;
    }

    public long getVisualwordId() {
      return this.visualwordId;
    }

    public loadPostingList_args setVisualwordId(long visualwordId) {
      this.visualwordId = visualwordId;
      setVisualwordIdIsSet(true);
      return this;
    }

    public void unsetVisualwordId() {
      __isset_bit_vector.clear(__VISUALWORDID_ISSET_ID);
    }

    /** Returns true if field visualwordId is set (has been assigned a value) and false otherwise */
    public boolean isSetVisualwordId() {
      return __isset_bit_vector.get(__VISUALWORDID_ISSET_ID);
    }

    public void setVisualwordIdIsSet(boolean value) {
      __isset_bit_vector.set(__VISUALWORDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VISUALWORD_ID:
        if (value == null) {
          unsetVisualwordId();
        } else {
          setVisualwordId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VISUALWORD_ID:
        return Long.valueOf(getVisualwordId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VISUALWORD_ID:
        return isSetVisualwordId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadPostingList_args)
        return this.equals((loadPostingList_args)that);
      return false;
    }

    public boolean equals(loadPostingList_args that) {
      if (that == null)
        return false;

      boolean this_present_visualwordId = true;
      boolean that_present_visualwordId = true;
      if (this_present_visualwordId || that_present_visualwordId) {
        if (!(this_present_visualwordId && that_present_visualwordId))
          return false;
        if (this.visualwordId != that.visualwordId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadPostingList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadPostingList_args typedOther = (loadPostingList_args)other;

      lastComparison = Boolean.valueOf(isSetVisualwordId()).compareTo(typedOther.isSetVisualwordId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisualwordId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visualwordId, typedOther.visualwordId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadPostingList_args(");
      boolean first = true;

      sb.append("visualwordId:");
      sb.append(this.visualwordId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadPostingList_argsStandardSchemeFactory implements SchemeFactory {
      public loadPostingList_argsStandardScheme getScheme() {
        return new loadPostingList_argsStandardScheme();
      }
    }

    private static class loadPostingList_argsStandardScheme extends StandardScheme<loadPostingList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadPostingList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VISUALWORD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.visualwordId = iprot.readI64();
                struct.setVisualwordIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadPostingList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VISUALWORD_ID_FIELD_DESC);
        oprot.writeI64(struct.visualwordId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadPostingList_argsTupleSchemeFactory implements SchemeFactory {
      public loadPostingList_argsTupleScheme getScheme() {
        return new loadPostingList_argsTupleScheme();
      }
    }

    private static class loadPostingList_argsTupleScheme extends TupleScheme<loadPostingList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadPostingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVisualwordId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVisualwordId()) {
          oprot.writeI64(struct.visualwordId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadPostingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.visualwordId = iprot.readI64();
          struct.setVisualwordIdIsSet(true);
        }
      }
    }

  }

  public static class loadPostingList_result implements org.apache.thrift.TBase<loadPostingList_result, loadPostingList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadPostingList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadPostingList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadPostingList_resultTupleSchemeFactory());
    }

    public List<Posting> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Posting.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadPostingList_result.class, metaDataMap);
    }

    public loadPostingList_result() {
    }

    public loadPostingList_result(
      List<Posting> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadPostingList_result(loadPostingList_result other) {
      if (other.isSetSuccess()) {
        List<Posting> __this__success = new ArrayList<Posting>();
        for (Posting other_element : other.success) {
          __this__success.add(new Posting(other_element));
        }
        this.success = __this__success;
      }
    }

    public loadPostingList_result deepCopy() {
      return new loadPostingList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Posting> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Posting elem) {
      if (this.success == null) {
        this.success = new ArrayList<Posting>();
      }
      this.success.add(elem);
    }

    public List<Posting> getSuccess() {
      return this.success;
    }

    public loadPostingList_result setSuccess(List<Posting> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Posting>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadPostingList_result)
        return this.equals((loadPostingList_result)that);
      return false;
    }

    public boolean equals(loadPostingList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadPostingList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadPostingList_result typedOther = (loadPostingList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadPostingList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadPostingList_resultStandardSchemeFactory implements SchemeFactory {
      public loadPostingList_resultStandardScheme getScheme() {
        return new loadPostingList_resultStandardScheme();
      }
    }

    private static class loadPostingList_resultStandardScheme extends StandardScheme<loadPostingList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadPostingList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Posting>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Posting _elem10; // required
                    _elem10 = new Posting();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadPostingList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Posting _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadPostingList_resultTupleSchemeFactory implements SchemeFactory {
      public loadPostingList_resultTupleScheme getScheme() {
        return new loadPostingList_resultTupleScheme();
      }
    }

    private static class loadPostingList_resultTupleScheme extends TupleScheme<loadPostingList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadPostingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Posting _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadPostingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Posting>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Posting _elem15; // required
              _elem15 = new Posting();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPosting_args implements org.apache.thrift.TBase<addPosting_args, addPosting_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPosting_args");

    private static final org.apache.thrift.protocol.TField VISUALWORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("visualwordId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField POSTING_FIELD_DESC = new org.apache.thrift.protocol.TField("posting", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPosting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPosting_argsTupleSchemeFactory());
    }

    public long visualwordId; // required
    public Posting posting; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VISUALWORD_ID((short)1, "visualwordId"),
      POSTING((short)2, "posting");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VISUALWORD_ID
            return VISUALWORD_ID;
          case 2: // POSTING
            return POSTING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VISUALWORDID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VISUALWORD_ID, new org.apache.thrift.meta_data.FieldMetaData("visualwordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.POSTING, new org.apache.thrift.meta_data.FieldMetaData("posting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Posting.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPosting_args.class, metaDataMap);
    }

    public addPosting_args() {
    }

    public addPosting_args(
      long visualwordId,
      Posting posting)
    {
      this();
      this.visualwordId = visualwordId;
      setVisualwordIdIsSet(true);
      this.posting = posting;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPosting_args(addPosting_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.visualwordId = other.visualwordId;
      if (other.isSetPosting()) {
        this.posting = new Posting(other.posting);
      }
    }

    public addPosting_args deepCopy() {
      return new addPosting_args(this);
    }

    @Override
    public void clear() {
      setVisualwordIdIsSet(false);
      this.visualwordId = 0;
      this.posting = null;
    }

    public long getVisualwordId() {
      return this.visualwordId;
    }

    public addPosting_args setVisualwordId(long visualwordId) {
      this.visualwordId = visualwordId;
      setVisualwordIdIsSet(true);
      return this;
    }

    public void unsetVisualwordId() {
      __isset_bit_vector.clear(__VISUALWORDID_ISSET_ID);
    }

    /** Returns true if field visualwordId is set (has been assigned a value) and false otherwise */
    public boolean isSetVisualwordId() {
      return __isset_bit_vector.get(__VISUALWORDID_ISSET_ID);
    }

    public void setVisualwordIdIsSet(boolean value) {
      __isset_bit_vector.set(__VISUALWORDID_ISSET_ID, value);
    }

    public Posting getPosting() {
      return this.posting;
    }

    public addPosting_args setPosting(Posting posting) {
      this.posting = posting;
      return this;
    }

    public void unsetPosting() {
      this.posting = null;
    }

    /** Returns true if field posting is set (has been assigned a value) and false otherwise */
    public boolean isSetPosting() {
      return this.posting != null;
    }

    public void setPostingIsSet(boolean value) {
      if (!value) {
        this.posting = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VISUALWORD_ID:
        if (value == null) {
          unsetVisualwordId();
        } else {
          setVisualwordId((Long)value);
        }
        break;

      case POSTING:
        if (value == null) {
          unsetPosting();
        } else {
          setPosting((Posting)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VISUALWORD_ID:
        return Long.valueOf(getVisualwordId());

      case POSTING:
        return getPosting();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VISUALWORD_ID:
        return isSetVisualwordId();
      case POSTING:
        return isSetPosting();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPosting_args)
        return this.equals((addPosting_args)that);
      return false;
    }

    public boolean equals(addPosting_args that) {
      if (that == null)
        return false;

      boolean this_present_visualwordId = true;
      boolean that_present_visualwordId = true;
      if (this_present_visualwordId || that_present_visualwordId) {
        if (!(this_present_visualwordId && that_present_visualwordId))
          return false;
        if (this.visualwordId != that.visualwordId)
          return false;
      }

      boolean this_present_posting = true && this.isSetPosting();
      boolean that_present_posting = true && that.isSetPosting();
      if (this_present_posting || that_present_posting) {
        if (!(this_present_posting && that_present_posting))
          return false;
        if (!this.posting.equals(that.posting))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPosting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPosting_args typedOther = (addPosting_args)other;

      lastComparison = Boolean.valueOf(isSetVisualwordId()).compareTo(typedOther.isSetVisualwordId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisualwordId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visualwordId, typedOther.visualwordId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosting()).compareTo(typedOther.isSetPosting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosting()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posting, typedOther.posting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPosting_args(");
      boolean first = true;

      sb.append("visualwordId:");
      sb.append(this.visualwordId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("posting:");
      if (this.posting == null) {
        sb.append("null");
      } else {
        sb.append(this.posting);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPosting_argsStandardSchemeFactory implements SchemeFactory {
      public addPosting_argsStandardScheme getScheme() {
        return new addPosting_argsStandardScheme();
      }
    }

    private static class addPosting_argsStandardScheme extends StandardScheme<addPosting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPosting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VISUALWORD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.visualwordId = iprot.readI64();
                struct.setVisualwordIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSTING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.posting = new Posting();
                struct.posting.read(iprot);
                struct.setPostingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPosting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VISUALWORD_ID_FIELD_DESC);
        oprot.writeI64(struct.visualwordId);
        oprot.writeFieldEnd();
        if (struct.posting != null) {
          oprot.writeFieldBegin(POSTING_FIELD_DESC);
          struct.posting.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPosting_argsTupleSchemeFactory implements SchemeFactory {
      public addPosting_argsTupleScheme getScheme() {
        return new addPosting_argsTupleScheme();
      }
    }

    private static class addPosting_argsTupleScheme extends TupleScheme<addPosting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPosting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVisualwordId()) {
          optionals.set(0);
        }
        if (struct.isSetPosting()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVisualwordId()) {
          oprot.writeI64(struct.visualwordId);
        }
        if (struct.isSetPosting()) {
          struct.posting.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPosting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.visualwordId = iprot.readI64();
          struct.setVisualwordIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.posting = new Posting();
          struct.posting.read(iprot);
          struct.setPostingIsSet(true);
        }
      }
    }

  }

  public static class addPosting_result implements org.apache.thrift.TBase<addPosting_result, addPosting_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPosting_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPosting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPosting_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPosting_result.class, metaDataMap);
    }

    public addPosting_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPosting_result(addPosting_result other) {
    }

    public addPosting_result deepCopy() {
      return new addPosting_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPosting_result)
        return this.equals((addPosting_result)that);
      return false;
    }

    public boolean equals(addPosting_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPosting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPosting_result typedOther = (addPosting_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPosting_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPosting_resultStandardSchemeFactory implements SchemeFactory {
      public addPosting_resultStandardScheme getScheme() {
        return new addPosting_resultStandardScheme();
      }
    }

    private static class addPosting_resultStandardScheme extends StandardScheme<addPosting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPosting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPosting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPosting_resultTupleSchemeFactory implements SchemeFactory {
      public addPosting_resultTupleScheme getScheme() {
        return new addPosting_resultTupleScheme();
      }
    }

    private static class addPosting_resultTupleScheme extends TupleScheme<addPosting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPosting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPosting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
